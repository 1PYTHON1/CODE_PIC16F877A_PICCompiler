CCS PCM C Compiler, Version 5.042, 5967               24-Abr.-20 13:00

               Filename:   C:\Users\Casa\Desktop\PIC_TECLADO_MATRIX\main.lst

               ROM used:   659 words (8%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           27 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   23B
0003:  NOP
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  41
000C:  RETLW  34
000D:  RETLW  35
000E:  RETLW  36
000F:  RETLW  42
0010:  RETLW  37
0011:  RETLW  38
0012:  RETLW  39
0013:  RETLW  43
0014:  RETLW  2A
0015:  RETLW  30
0016:  RETLW  23
0017:  RETLW  44
0018:  DATA D4,22
0019:  DATA 43,26
001A:  DATA 41,22
001B:  DATA 4F,10
001C:  DATA 43,24
001D:  DATA 41,29
001E:  DATA 00,00
001F:  DATA 0C,00
*
0174:  MOVF   0B,W
0175:  MOVWF  28
0176:  BCF    0B.7
0177:  BSF    03.5
0178:  BSF    03.6
0179:  BSF    0C.7
017A:  BSF    0C.0
017B:  NOP
017C:  NOP
017D:  BCF    03.5
017E:  BCF    03.6
017F:  BTFSC  28.7
0180:  BSF    0B.7
0181:  BSF    03.6
0182:  MOVF   0C,W
0183:  ANDLW  7F
0184:  BTFSC  03.2
0185:  GOTO   1C8
0186:  BCF    03.6
0187:  MOVWF  28
0188:  BSF    03.6
0189:  MOVF   0D,W
018A:  BCF    03.6
018B:  MOVWF  29
018C:  BSF    03.6
018D:  MOVF   0F,W
018E:  BCF    03.6
018F:  MOVWF  2A
0190:  MOVF   28,W
0191:  MOVWF  2B
0192:  CALL   148
0193:  MOVF   29,W
0194:  BSF    03.6
0195:  MOVWF  0D
0196:  BCF    03.6
0197:  MOVF   2A,W
0198:  BSF    03.6
0199:  MOVWF  0F
019A:  BCF    03.6
019B:  MOVF   0B,W
019C:  MOVWF  2B
019D:  BCF    0B.7
019E:  BSF    03.5
019F:  BSF    03.6
01A0:  BSF    0C.7
01A1:  BSF    0C.0
01A2:  NOP
01A3:  NOP
01A4:  BCF    03.5
01A5:  BCF    03.6
01A6:  BTFSC  2B.7
01A7:  BSF    0B.7
01A8:  BSF    03.6
01A9:  RLF    0C,W
01AA:  RLF    0E,W
01AB:  ANDLW  7F
01AC:  BTFSC  03.2
01AD:  GOTO   1C8
01AE:  BCF    03.6
01AF:  MOVWF  28
01B0:  BSF    03.6
01B1:  MOVF   0D,W
01B2:  BCF    03.6
01B3:  MOVWF  29
01B4:  BSF    03.6
01B5:  MOVF   0F,W
01B6:  BCF    03.6
01B7:  MOVWF  2A
01B8:  MOVF   28,W
01B9:  MOVWF  2B
01BA:  CALL   148
01BB:  MOVF   29,W
01BC:  BSF    03.6
01BD:  MOVWF  0D
01BE:  BCF    03.6
01BF:  MOVF   2A,W
01C0:  BSF    03.6
01C1:  MOVWF  0F
01C2:  INCF   0D,F
01C3:  BTFSC  03.2
01C4:  INCF   0F,F
01C5:  BCF    03.6
01C6:  GOTO   174
01C7:  BSF    03.6
01C8:  BCF    03.6
01C9:  RETURN
*
0233:  BCF    0A.0
0234:  BSF    0A.1
0235:  BCF    0A.2
0236:  ADDWF  02,F
0237:  GOTO   1D6
0238:  GOTO   1DC
0239:  GOTO   1E2
023A:  GOTO   1E8
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #FUSES intrc_io,nowdt,noput,mclr,noprotect,nolvp 
.................... #use delay(internal=8000000) 
*
0020:  MOVLW  2D
0021:  MOVWF  04
0022:  BCF    03.7
0023:  MOVF   00,W
0024:  BTFSC  03.2
0025:  GOTO   033
0026:  MOVLW  02
0027:  MOVWF  78
0028:  CLRF   77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 78,F
002C:  GOTO   028
002D:  MOVLW  97
002E:  MOVWF  77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  DECFSZ 00,F
0032:  GOTO   026
0033:  RETURN
....................  
.................... #define LCD_ENABLE_PIN  PIN_D2                                   //// 
.................... #define LCD_RS_PIN      PIN_D0                                 //// 
.................... #define LCD_RW_PIN      PIN_D1                                    //// 
.................... #define LCD_DATA4       PIN_D4                                    //// 
.................... #define LCD_DATA5       PIN_D5                                    //// 
.................... #define LCD_DATA6       PIN_D6                                    //// 
.................... #define LCD_DATA7       PIN_D7   
.................... #INCLUDE<LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0099:  BSF    08.4
....................    output_float(LCD_DATA5); 
009A:  BSF    08.5
....................    output_float(LCD_DATA6); 
009B:  BSF    08.6
....................    output_float(LCD_DATA7); 
009C:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
009D:  BCF    03.5
009E:  BSF    08.1
009F:  BSF    03.5
00A0:  BCF    08.1
....................    delay_cycles(1); 
00A1:  NOP
....................    lcd_output_enable(1); 
00A2:  BCF    03.5
00A3:  BSF    08.2
00A4:  BSF    03.5
00A5:  BCF    08.2
....................    delay_cycles(1); 
00A6:  NOP
....................    high = lcd_read_nibble(); 
00A7:  BCF    03.5
00A8:  CALL   060
00A9:  MOVF   78,W
00AA:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
00AB:  BCF    08.2
00AC:  BSF    03.5
00AD:  BCF    08.2
....................    delay_cycles(1); 
00AE:  NOP
....................    lcd_output_enable(1); 
00AF:  BCF    03.5
00B0:  BSF    08.2
00B1:  BSF    03.5
00B2:  BCF    08.2
....................    delay_us(1); 
00B3:  GOTO   0B4
....................    low = lcd_read_nibble(); 
00B4:  BCF    03.5
00B5:  CALL   060
00B6:  MOVF   78,W
00B7:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
00B8:  BCF    08.2
00B9:  BSF    03.5
00BA:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00BB:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00BC:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00BD:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00BE:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00BF:  BCF    03.5
00C0:  SWAPF  33,W
00C1:  MOVWF  77
00C2:  MOVLW  F0
00C3:  ANDWF  77,F
00C4:  MOVF   77,W
00C5:  IORWF  32,W
00C6:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0060:  CLRF   34
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0061:  BSF    03.5
0062:  BSF    08.4
0063:  MOVLW  00
0064:  BCF    03.5
0065:  BTFSC  08.4
0066:  MOVLW  01
0067:  IORWF  34,F
....................    n |= input(LCD_DATA5) << 1; 
0068:  BSF    03.5
0069:  BSF    08.5
006A:  MOVLW  00
006B:  BCF    03.5
006C:  BTFSC  08.5
006D:  MOVLW  01
006E:  MOVWF  77
006F:  BCF    03.0
0070:  RLF    77,F
0071:  MOVF   77,W
0072:  IORWF  34,F
....................    n |= input(LCD_DATA6) << 2; 
0073:  BSF    03.5
0074:  BSF    08.6
0075:  MOVLW  00
0076:  BCF    03.5
0077:  BTFSC  08.6
0078:  MOVLW  01
0079:  MOVWF  77
007A:  RLF    77,F
007B:  RLF    77,F
007C:  MOVLW  FC
007D:  ANDWF  77,F
007E:  MOVF   77,W
007F:  IORWF  34,F
....................    n |= input(LCD_DATA7) << 3; 
0080:  BSF    03.5
0081:  BSF    08.7
0082:  MOVLW  00
0083:  BCF    03.5
0084:  BTFSC  08.7
0085:  MOVLW  01
0086:  MOVWF  77
0087:  RLF    77,F
0088:  RLF    77,F
0089:  RLF    77,F
008A:  MOVLW  F8
008B:  ANDWF  77,F
008C:  MOVF   77,W
008D:  IORWF  34,F
....................     
....................    return(n); 
008E:  MOVF   34,W
008F:  MOVWF  78
....................   #else 
0090:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0034:  BTFSC  33.0
0035:  GOTO   038
0036:  BCF    08.4
0037:  GOTO   039
0038:  BSF    08.4
0039:  BSF    03.5
003A:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
003B:  BCF    03.5
003C:  BTFSC  33.1
003D:  GOTO   040
003E:  BCF    08.5
003F:  GOTO   041
0040:  BSF    08.5
0041:  BSF    03.5
0042:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0043:  BCF    03.5
0044:  BTFSC  33.2
0045:  GOTO   048
0046:  BCF    08.6
0047:  GOTO   049
0048:  BSF    08.6
0049:  BSF    03.5
004A:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
004B:  BCF    03.5
004C:  BTFSC  33.3
004D:  GOTO   050
004E:  BCF    08.7
004F:  GOTO   051
0050:  BSF    08.7
0051:  BSF    03.5
0052:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0053:  NOP
....................    lcd_output_enable(1); 
0054:  BCF    03.5
0055:  BSF    08.2
0056:  BSF    03.5
0057:  BCF    08.2
....................    delay_us(2); 
0058:  GOTO   059
0059:  GOTO   05A
....................    lcd_output_enable(0); 
005A:  BCF    03.5
005B:  BCF    08.2
005C:  BSF    03.5
005D:  BCF    08.2
005E:  BCF    03.5
005F:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0091:  BSF    03.5
0092:  BCF    08.2
....................    lcd_rs_tris(); 
0093:  BCF    08.0
....................    lcd_rw_tris(); 
0094:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0095:  BCF    03.5
0096:  BCF    08.0
0097:  BSF    03.5
0098:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C7:  MOVF   78,W
00C8:  MOVWF  32
00C9:  BTFSS  32.7
00CA:  GOTO   0CD
00CB:  BSF    03.5
00CC:  GOTO   099
....................    lcd_output_rs(address); 
00CD:  MOVF   30,F
00CE:  BTFSS  03.2
00CF:  GOTO   0D2
00D0:  BCF    08.0
00D1:  GOTO   0D3
00D2:  BSF    08.0
00D3:  BSF    03.5
00D4:  BCF    08.0
....................    delay_cycles(1); 
00D5:  NOP
....................    lcd_output_rw(0); 
00D6:  BCF    03.5
00D7:  BCF    08.1
00D8:  BSF    03.5
00D9:  BCF    08.1
....................    delay_cycles(1); 
00DA:  NOP
....................    lcd_output_enable(0); 
00DB:  BCF    03.5
00DC:  BCF    08.2
00DD:  BSF    03.5
00DE:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
00DF:  BCF    03.5
00E0:  SWAPF  31,W
00E1:  MOVWF  32
00E2:  MOVLW  0F
00E3:  ANDWF  32,F
00E4:  MOVF   32,W
00E5:  MOVWF  33
00E6:  CALL   034
....................    lcd_send_nibble(n & 0xf); 
00E7:  MOVF   31,W
00E8:  ANDLW  0F
00E9:  MOVWF  32
00EA:  MOVWF  33
00EB:  CALL   034
00EC:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00ED:  MOVLW  28
00EE:  MOVWF  29
00EF:  MOVLW  0C
00F0:  MOVWF  2A
00F1:  MOVLW  01
00F2:  MOVWF  2B
00F3:  MOVLW  06
00F4:  MOVWF  2C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00F5:  BCF    08.2
00F6:  BSF    03.5
00F7:  BCF    08.2
....................    lcd_output_rs(0); 
00F8:  BCF    03.5
00F9:  BCF    08.0
00FA:  BSF    03.5
00FB:  BCF    08.0
....................    lcd_output_rw(0); 
00FC:  BCF    03.5
00FD:  BCF    08.1
00FE:  BSF    03.5
00FF:  BCF    08.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0100:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0101:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0102:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0103:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0104:  BCF    08.2
....................    lcd_rs_tris(); 
0105:  BCF    08.0
....................    lcd_rw_tris(); 
0106:  BCF    08.1
....................  #endif 
....................      
....................    delay_ms(15); 
0107:  MOVLW  0F
0108:  BCF    03.5
0109:  MOVWF  2D
010A:  CALL   020
....................    for(i=1;i<=3;++i) 
010B:  MOVLW  01
010C:  MOVWF  28
010D:  MOVF   28,W
010E:  SUBLW  03
010F:  BTFSS  03.0
0110:  GOTO   119
....................    { 
....................        lcd_send_nibble(3); 
0111:  MOVLW  03
0112:  MOVWF  33
0113:  CALL   034
....................        delay_ms(5); 
0114:  MOVLW  05
0115:  MOVWF  2D
0116:  CALL   020
0117:  INCF   28,F
0118:  GOTO   10D
....................    } 
....................     
....................    lcd_send_nibble(2); 
0119:  MOVLW  02
011A:  MOVWF  33
011B:  CALL   034
....................    delay_ms(5); 
011C:  MOVLW  05
011D:  MOVWF  2D
011E:  CALL   020
....................    for(i=0;i<=3;++i) 
011F:  CLRF   28
0120:  MOVF   28,W
0121:  SUBLW  03
0122:  BTFSS  03.0
0123:  GOTO   130
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0124:  MOVLW  29
0125:  ADDWF  28,W
0126:  MOVWF  04
0127:  BCF    03.7
0128:  MOVF   00,W
0129:  MOVWF  2D
012A:  CLRF   30
012B:  MOVF   2D,W
012C:  MOVWF  31
012D:  CALL   091
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
012E:  INCF   28,F
012F:  GOTO   120
0130:  BCF    0A.3
0131:  BCF    0A.4
0132:  GOTO   25C (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0136:  DECFSZ 2D,W
0137:  GOTO   139
0138:  GOTO   13C
....................       address=LCD_LINE_TWO; 
0139:  MOVLW  40
013A:  MOVWF  2E
013B:  GOTO   13D
....................    else 
....................       address=0; 
013C:  CLRF   2E
....................       
....................    address+=x-1; 
013D:  MOVLW  01
013E:  SUBWF  2C,W
013F:  ADDWF  2E,F
....................    lcd_send_byte(0,0x80|address); 
0140:  MOVF   2E,W
0141:  IORLW  80
0142:  MOVWF  2F
0143:  CLRF   30
0144:  MOVF   2F,W
0145:  MOVWF  31
0146:  CALL   091
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0147:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0148:  MOVF   2B,W
0149:  XORLW  07
014A:  BTFSC  03.2
014B:  GOTO   156
014C:  XORLW  0B
014D:  BTFSC  03.2
014E:  GOTO   15B
014F:  XORLW  06
0150:  BTFSC  03.2
0151:  GOTO   163
0152:  XORLW  02
0153:  BTFSC  03.2
0154:  GOTO   169
0155:  GOTO   16E
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0156:  MOVLW  01
0157:  MOVWF  2C
0158:  MOVWF  2D
0159:  CALL   136
015A:  GOTO   173
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
015B:  CLRF   30
015C:  MOVLW  01
015D:  MOVWF  31
015E:  CALL   091
....................                      delay_ms(2); 
015F:  MOVLW  02
0160:  MOVWF  2D
0161:  CALL   020
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0162:  GOTO   173
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0163:  MOVLW  01
0164:  MOVWF  2C
0165:  MOVLW  02
0166:  MOVWF  2D
0167:  CALL   136
0168:  GOTO   173
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0169:  CLRF   30
016A:  MOVLW  10
016B:  MOVWF  31
016C:  CALL   091
016D:  GOTO   173
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
016E:  MOVLW  01
016F:  MOVWF  30
0170:  MOVF   2B,W
0171:  MOVWF  31
0172:  CALL   091
....................      #endif 
....................    } 
0173:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define use_portb_kbd  
.................... #INCLUDE<Kbd4x4.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 4) 
.................... #define COL1 (1 << 5) 
.................... #define COL2 (1 << 6) 
.................... #define COL3 (1 << 7) 
....................  
.................... #define ROW0 (1 << 0) 
.................... #define ROW1 (1 << 1) 
.................... #define ROW2 (1 << 2) 
.................... #define ROW3 (1 << 3) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][4] = {{'1','2','3','A'}, 
....................                          {'4','5','6','B'}, 
....................                          {'7','8','9','C'}, 
....................                          {'*','0','#','D'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
0133:  BCF    0A.3
0134:  BCF    0A.4
0135:  GOTO   25D (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
0256:  BCF    03.6
0257:  CLRF   20
....................    static int1 kbd_down; 
0258:  BCF    21.0
....................    static char last_key; 
0259:  CLRF   22
....................    static BYTE col; 
025A:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
01CA:  CLRF   28
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
01CB:  INCF   20,F
01CC:  MOVF   20,W
01CD:  SUBLW  21
01CE:  BTFSC  03.0
01CF:  GOTO   22A
....................        switch (col) { 
01D0:  MOVF   23,W
01D1:  ADDLW  FC
01D2:  BTFSC  03.0
01D3:  GOTO   1ED
01D4:  ADDLW  04
01D5:  GOTO   233
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
01D6:  MOVLW  EF
01D7:  BSF    03.5
01D8:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
01D9:  BCF    03.5
01DA:  MOVWF  06
....................                     break; 
01DB:  GOTO   1ED
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
01DC:  MOVLW  DF
01DD:  BSF    03.5
01DE:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
01DF:  BCF    03.5
01E0:  MOVWF  06
....................                     break; 
01E1:  GOTO   1ED
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
01E2:  MOVLW  BF
01E3:  BSF    03.5
01E4:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
01E5:  BCF    03.5
01E6:  MOVWF  06
....................                     break; 
01E7:  GOTO   1ED
....................          case 3   : set_tris_kbd(ALL_PINS&~COL3); 
01E8:  MOVLW  7F
01E9:  BSF    03.5
01EA:  MOVWF  06
....................                     kbd=~COL3&ALL_PINS; 
01EB:  BCF    03.5
01EC:  MOVWF  06
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
01ED:  BTFSS  21.0
01EE:  GOTO   1F9
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
01EF:  MOVF   06,W
01F0:  ANDLW  0F
01F1:  SUBLW  0F
01F2:  BTFSS  03.2
01F3:  GOTO   1F8
....................            kbd_down=FALSE; 
01F4:  BCF    21.0
....................            kchar=last_key; 
01F5:  MOVF   22,W
01F6:  MOVWF  28
....................            last_key='\0'; 
01F7:  CLRF   22
....................          } 
....................        } else { 
01F8:  GOTO   229
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
01F9:  MOVF   06,W
01FA:  ANDLW  0F
01FB:  SUBLW  0F
01FC:  BTFSC  03.2
01FD:  GOTO   224
....................              if((kbd & ROW0)==0) 
01FE:  MOVF   06,W
01FF:  ANDLW  01
0200:  BTFSS  03.2
0201:  GOTO   204
....................                row=0; 
0202:  CLRF   29
0203:  GOTO   218
....................              else if((kbd & ROW1)==0) 
0204:  MOVF   06,W
0205:  ANDLW  02
0206:  BTFSS  03.2
0207:  GOTO   20B
....................                row=1; 
0208:  MOVLW  01
0209:  MOVWF  29
020A:  GOTO   218
....................              else if((kbd & ROW2)==0) 
020B:  MOVF   06,W
020C:  ANDLW  04
020D:  BTFSS  03.2
020E:  GOTO   212
....................                row=2; 
020F:  MOVLW  02
0210:  MOVWF  29
0211:  GOTO   218
....................              else if((kbd & ROW3)==0) 
0212:  MOVF   06,W
0213:  ANDLW  08
0214:  BTFSS  03.2
0215:  GOTO   218
....................                row=3; 
0216:  MOVLW  03
0217:  MOVWF  29
....................              last_key =KEYS[row][col]; 
0218:  RLF    29,W
0219:  MOVWF  77
021A:  RLF    77,F
021B:  MOVLW  FC
021C:  ANDWF  77,F
021D:  MOVF   77,W
021E:  ADDWF  23,W
021F:  CALL   004
0220:  MOVWF  78
0221:  MOVWF  22
....................              kbd_down = TRUE; 
0222:  BSF    21.0
....................           } else { 
0223:  GOTO   229
....................              ++col; 
0224:  INCF   23,F
....................              if(col==4) 
0225:  MOVF   23,W
0226:  SUBLW  04
0227:  BTFSC  03.2
....................                col=0; 
0228:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
0229:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
022A:  MOVLW  FF
022B:  BSF    03.5
022C:  MOVWF  06
....................   return(kchar); 
022D:  BCF    03.5
022E:  MOVF   28,W
022F:  MOVWF  78
0230:  BCF    0A.3
0231:  BCF    0A.4
0232:  GOTO   273 (RETURN)
.................... } 
....................  
....................  
....................  
.................... void main() 
*
023B:  MOVF   03,W
023C:  ANDLW  1F
023D:  MOVWF  03
023E:  MOVLW  71
023F:  BSF    03.5
0240:  MOVWF  0F
0241:  CLRF   10
0242:  MOVF   0F,W
0243:  BCF    03.5
0244:  CLRF   25
0245:  CLRF   24
0246:  BSF    03.5
0247:  BSF    03.6
0248:  MOVF   09,W
0249:  ANDLW  C0
024A:  MOVWF  09
024B:  BCF    03.6
024C:  BCF    1F.4
024D:  BCF    1F.5
024E:  MOVLW  00
024F:  BSF    03.6
0250:  MOVWF  08
0251:  BCF    03.5
0252:  CLRF   07
0253:  CLRF   08
0254:  CLRF   09
0255:  BCF    03.7
.................... { 
.................... char k; 
.................... int x; 
.................... lcd_init(); 
*
025B:  GOTO   0ED
.................... kbd_init(); 
025C:  GOTO   133
.................... port_b_pullups(0xff); 
025D:  MOVLW  FF
025E:  BSF    03.5
025F:  MOVWF  15
0260:  BCF    01.7
.................... lcd_gotoxy(1,1); 
0261:  MOVLW  01
0262:  BCF    03.5
0263:  MOVWF  2C
0264:  MOVWF  2D
0265:  CALL   136
.................... lcd_putc("TECLADO CHAR"); 
0266:  MOVLW  18
0267:  BSF    03.6
0268:  MOVWF  0D
0269:  MOVLW  00
026A:  MOVWF  0F
026B:  BCF    03.6
026C:  CALL   174
.................... lcd_gotoxy(1,2); 
026D:  MOVLW  01
026E:  MOVWF  2C
026F:  MOVLW  02
0270:  MOVWF  2D
0271:  CALL   136
....................    while(TRUE) 
....................    { 
....................    k = kbd_getc(); 
0272:  GOTO   1CA
0273:  MOVF   78,W
0274:  MOVWF  26
....................    x=k-48; 
0275:  MOVLW  30
0276:  SUBWF  26,W
0277:  MOVWF  27
....................    if(k!=0) 
0278:  MOVF   26,F
0279:  BTFSC  03.2
027A:  GOTO   291
....................    { 
....................    if(k=='*') 
027B:  MOVF   26,W
027C:  SUBLW  2A
027D:  BTFSS  03.2
027E:  GOTO   287
....................    lcd_putc( "\f" ); 
027F:  MOVLW  1F
0280:  BSF    03.6
0281:  MOVWF  0D
0282:  MOVLW  00
0283:  MOVWF  0F
0284:  BCF    03.6
0285:  CALL   174
0286:  GOTO   28A
....................    ELSE 
....................    LCD_PUTC(k); 
0287:  MOVF   26,W
0288:  MOVWF  2B
0289:  CALL   148
....................    delay_ms(500); 
028A:  MOVLW  02
028B:  MOVWF  28
028C:  MOVLW  FA
028D:  MOVWF  2D
028E:  CALL   020
028F:  DECFSZ 28,F
0290:  GOTO   28C
....................    } 
0291:  GOTO   272
....................        
....................    } 
....................  
.................... } 
.................... ////descomentar para programar el pic 
0292:  SLEEP
.................... /*#use i2c(Master,Fast=100000, sda=PIN_D1, scl=PIN_D0,force_sw)  
.................... #include <i2c_Flex_LCD.c>   
.................... #define use_portb_kbd  
.................... #include <Kbd4x4.c> 
.................... INT x; 
.................... char k; 
.................... float q; 
.................... float p; 
.................... VOID LEER_A0() 
.................... { 
.................... set_adc_channel(0); 
.................... q=read_adc(); 
.................... p=(4.9*q)/1023; 
.................... LCD_GOTOXY(1,1); 
.................... PRINTF(LCD_PUTC,"A0:%4.1f",q); 
.................... LCD_GOTOXY(11,1); 
.................... PRINTF(LCD_PUTC,"V:%4.2f",p); 
.................... } 
.................... void caracter() 
.................... { 
....................     k = kbd_getc(); 
....................    LCD_GOTOXY(1,2); 
....................    x=k-48; 
....................    if(k!=0) 
....................    { 
....................    if(k=='*') 
....................    lcd_putc( "\f" ); 
....................    ELSE 
....................    LCD_PUTC(k); 
....................    delay_ms(10); 
....................    } 
....................    } 
.................... void main() {  
.................... port_b_pullups(0XFF); 
.................... kbd_init(); 
.................... setup_adc_ports(0); 
.................... setup_adc(adc_clock_internal); 
.................... lcd_init(0x4E  ,16,2); 
.................... lcd_backlight_led(ON); //Enciende la luz de Fondo 
.................... while (TRUE) {  
.................... caracter(); 
.................... }     
.................... }  
.................... */ 

Configuration Fuses:
   Word  1: 2FF4   INTRC_IO NOWDT NOPUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
