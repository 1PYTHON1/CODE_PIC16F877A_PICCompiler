CCS PCM C Compiler, Version 5.042, 5967               17-Abr.-20 11:50

               Filename:   C:\Users\Casa\Desktop\PIC16F877A_PICC\LECTURA_ANALOGICA_PIC12F675\LECTURA_ANALOGICA_PIC12F675.lst

               ROM used:   734 words (72%)
                           Largest free fragment is 290
               RAM used:   16 (25%) at main() level
                           31 (48%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   252
0003:  NOP
.................... #include <LECTURA_ANALOGICA_PIC12F675.h> 
.................... #include <12F675.h> 
.................... //////////// Standard Header file for the PIC12F675 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC12F675 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  4A
0011:  RETLW  4F
0012:  RETLW  53
0013:  RETLW  45
0014:  RETLW  20
0015:  RETLW  49
0016:  RETLW  44
0017:  RETLW  20
0018:  RETLW  31
0019:  RETLW  36
001A:  RETLW  2F
001B:  RETLW  30
001C:  RETLW  34
001D:  RETLW  2F
001E:  RETLW  32
001F:  RETLW  32
0020:  RETLW  00
0021:  BCF    0A.0
0022:  BCF    0A.1
0023:  BCF    0A.2
0024:  ADDWF  02,F
0025:  RETLW  54
0026:  RETLW  45
0027:  RETLW  4D
0028:  RETLW  50
0029:  RETLW  45
002A:  RETLW  52
002B:  RETLW  41
002C:  RETLW  54
002D:  RETLW  55
002E:  RETLW  52
002F:  RETLW  41
0030:  RETLW  3A
0031:  RETLW  00
*
0197:  MOVLW  10
0198:  MOVWF  34
0199:  CLRF   20
019A:  CLRF   23
019B:  RRF    31,F
019C:  RRF    30,F
019D:  BTFSS  03.0
019E:  GOTO   1A5
019F:  MOVF   32,W
01A0:  ADDWF  20,F
01A1:  BTFSC  03.0
01A2:  INCF   23,F
01A3:  MOVF   33,W
01A4:  ADDWF  23,F
01A5:  RRF    23,F
01A6:  RRF    20,F
01A7:  RRF    22,F
01A8:  RRF    21,F
01A9:  DECFSZ 34,F
01AA:  GOTO   19B
01AB:  RETURN
*
0208:  MOVF   31,W
0209:  CLRF   21
020A:  SUBWF  30,W
020B:  BTFSC  03.0
020C:  GOTO   210
020D:  MOVF   30,W
020E:  MOVWF  20
020F:  GOTO   21C
0210:  CLRF   20
0211:  MOVLW  08
0212:  MOVWF  32
0213:  RLF    30,F
0214:  RLF    20,F
0215:  MOVF   31,W
0216:  SUBWF  20,W
0217:  BTFSC  03.0
0218:  MOVWF  20
0219:  RLF    21,F
021A:  DECFSZ 32,F
021B:  GOTO   213
021C:  RETURN
021D:  MOVF   21,W
021E:  MOVF   2E,W
021F:  MOVWF  30
0220:  MOVLW  64
0221:  MOVWF  31
0222:  CALL   208
0223:  MOVF   20,W
0224:  MOVWF  2E
0225:  MOVF   21,W
0226:  MOVLW  30
0227:  BTFSS  03.2
0228:  GOTO   230
0229:  BTFSS  2F.1
022A:  GOTO   237
022B:  BTFSC  2F.3
022C:  GOTO   237
022D:  BTFSC  2F.4
022E:  MOVLW  20
022F:  GOTO   233
0230:  BCF    2F.3
0231:  BCF    2F.4
0232:  BSF    2F.0
0233:  ADDWF  21,F
0234:  MOVF   21,W
0235:  MOVWF  30
0236:  CALL   1E3
0237:  MOVF   2E,W
0238:  MOVWF  30
0239:  MOVLW  0A
023A:  MOVWF  31
023B:  CALL   208
023C:  MOVF   20,W
023D:  MOVWF  2E
023E:  MOVF   21,W
023F:  MOVLW  30
0240:  BTFSS  03.2
0241:  GOTO   248
0242:  BTFSC  2F.3
0243:  GOTO   24C
0244:  BTFSS  2F.0
0245:  GOTO   24C
0246:  BTFSC  2F.4
0247:  MOVLW  20
0248:  ADDWF  21,F
0249:  MOVF   21,W
024A:  MOVWF  30
024B:  CALL   1E3
024C:  MOVLW  30
024D:  ADDWF  2E,F
024E:  MOVF   2E,W
024F:  MOVWF  30
0250:  CALL   1E3
0251:  GOTO   2D2 (RETURN)
....................  
.................... #list 
....................  
.................... #DEVICE ADC =10 
.................... #FUSES  HS,NOWDT,NOMCLR,NOPROTECT,PUT 
.................... #use delay(crystal=20000000) 
*
0032:  MOVLW  32
0033:  MOVWF  04
0034:  MOVF   00,W
0035:  BTFSC  03.2
0036:  GOTO   044
0037:  MOVLW  06
0038:  MOVWF  21
0039:  CLRF   20
003A:  DECFSZ 20,F
003B:  GOTO   03A
003C:  DECFSZ 21,F
003D:  GOTO   039
003E:  MOVLW  7B
003F:  MOVWF  20
0040:  DECFSZ 20,F
0041:  GOTO   040
0042:  DECFSZ 00,F
0043:  GOTO   037
0044:  RETURN
....................  
....................  
.................... #use i2c(Master,Fast=100000, sda=PIN_A1, scl=PIN_A0,force_sw) 
0045:  MOVLW  08
0046:  MOVWF  21
0047:  MOVLW  04
0048:  MOVWF  20
0049:  DECFSZ 20,F
004A:  GOTO   049
004B:  BCF    05.0
004C:  BSF    03.5
004D:  BCF    05.0
004E:  MOVLW  03
004F:  BCF    03.5
0050:  MOVWF  20
0051:  DECFSZ 20,F
0052:  GOTO   051
0053:  RLF    3E,F
0054:  BCF    05.1
0055:  BTFSS  03.0
0056:  GOTO   05A
0057:  BSF    03.5
0058:  BSF    05.1
0059:  BCF    03.5
005A:  BTFSC  03.0
005B:  GOTO   05F
005C:  BSF    03.5
005D:  BCF    05.1
005E:  BCF    03.5
005F:  BSF    03.5
0060:  BSF    05.0
0061:  BCF    03.5
0062:  BTFSS  05.0
0063:  GOTO   062
0064:  DECFSZ 21,F
0065:  GOTO   047
0066:  MOVLW  04
0067:  MOVWF  20
0068:  DECFSZ 20,F
0069:  GOTO   068
006A:  BCF    05.0
006B:  BSF    03.5
006C:  BCF    05.0
006D:  NOP
006E:  BSF    05.1
006F:  MOVLW  03
0070:  BCF    03.5
0071:  MOVWF  20
0072:  DECFSZ 20,F
0073:  GOTO   072
0074:  MOVLW  03
0075:  MOVWF  20
0076:  DECFSZ 20,F
0077:  GOTO   076
0078:  BSF    03.5
0079:  BSF    05.0
007A:  BCF    03.5
007B:  BTFSS  05.0
007C:  GOTO   07B
007D:  CLRF   21
007E:  MOVLW  03
007F:  MOVWF  20
0080:  DECFSZ 20,F
0081:  GOTO   080
0082:  BTFSC  05.1
0083:  BSF    21.0
0084:  BCF    05.0
0085:  BSF    03.5
0086:  BCF    05.0
0087:  BCF    03.5
0088:  BCF    05.1
0089:  BSF    03.5
008A:  BCF    05.1
008B:  BCF    03.5
008C:  RETURN
.................... #include <i2c_Flex_LCD.c> 
.................... //-----------------------------------------------------------------------------  
.................... // Title:         i2c_Flex_LCD  
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns  
.................... //                using PCF8574T interface board with I2C protocol.  
.................... // Date:          Nov-2013  
.................... // Ver.Rev.:      1.1  
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of  
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // lcd_init() Must be called before any other function.  
.................... //  
.................... // lcd_putc(c) Will display c on the next position of the LCD.  
.................... //   
.................... //     \f Clear LCD display  
.................... //     \n Set write position on next lcd line  
.................... //     \b LCD backspace  
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)  
.................... //  
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED  
.................... //  
.................... //-----------------------------------------------------------------------------  
.................... // LCD pins D0-D3 are not used.  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from  
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C.  
.................... //              The tests of these routines have been programmed using the IC  
.................... //              Phillips PCF8574T. I've used 4 bits mode programming.  
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T.  
.................... //              RW Pin is not being used.  
.................... //  
.................... // As defined in the following structure the pin connection is as follows:  
.................... //  
.................... //  PCF8574P     LCD  
.................... //  ========     ======  
.................... //     P0        RS  
.................... //     P1        RW    (Not used!)  
.................... //     P2        Enable   
.................... //     P3        Led Backlight  
.................... //     P4        D4  
.................... //     P5        D5  
.................... //     P6        D6  
.................... //     P7        D7  
.................... //  
.................... //  The SCL and SDA pins should be pull-up resistor as shown below:  
.................... //  
.................... //             +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SDA pin   
.................... //(SDA)                       
.................... //              +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SCL pin   
.................... //(SCL)  
.................... //  
.................... //To PIC                    To i2c slave  
.................... //Vss pin ----------------- Vss or ground pin   
.................... //                |  
.................... //              -----  
.................... //               ---  Ground  
.................... //                -   
.................... //   
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS"  
.................... //-----------------------------------------------------------------------------  
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module  
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4  
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20    
....................  
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS  
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW  
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN  
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED  
....................  
.................... #define addr_row_one          0x00        //LCD RAM address for row 1  
.................... #define addr_row_two          0x40        //LCD RAM address for row 2  
.................... #define addr_row_three        0x14        //LCD RAM address for row 3  
.................... #define addr_row_four         0x54        //LCD RAM address for row 4  
....................  
.................... #define ON                    1  
.................... #define OFF                   0  
.................... #define NOT                   ~  
.................... #define data_shifted          data<<4  
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT;  
....................  
.................... void lcd_backlight_led(byte bl)  
.................... {   
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF;  
.................... }  
....................  
.................... void i2c_send_nibble(byte data, byte type)  
.................... {     
....................    switch (type)  
008D:  MOVF   3C,W
008E:  XORLW  00
008F:  BTFSC  03.2
0090:  GOTO   095
0091:  XORLW  01
0092:  BTFSC  03.2
0093:  GOTO   0B8
0094:  GOTO   0DC
....................    {       
....................       case 0 :       
....................       i2c_write(data_shifted | BACKLIGHT_LED);  
0095:  SWAPF  3B,W
0096:  MOVWF  20
0097:  MOVLW  F0
0098:  ANDWF  20,F
0099:  MOVF   20,W
009A:  IORWF  28,W
009B:  MOVWF  3D
009C:  MOVWF  3E
009D:  CALL   045
....................       delay_cycles(1);  
009E:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED );  
009F:  SWAPF  3B,W
00A0:  MOVWF  20
00A1:  MOVLW  F0
00A2:  ANDWF  20,F
00A3:  MOVF   20,W
00A4:  IORLW  04
00A5:  IORWF  28,W
00A6:  MOVWF  3D
00A7:  MOVWF  3E
00A8:  CALL   045
....................       delay_us(2);  
00A9:  MOVLW  03
00AA:  MOVWF  20
00AB:  DECFSZ 20,F
00AC:  GOTO   0AB
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED);  
00AD:  SWAPF  3B,W
00AE:  MOVWF  20
00AF:  MOVLW  F0
00B0:  ANDWF  20,F
00B1:  MOVF   20,W
00B2:  ANDLW  FB
00B3:  IORWF  28,W
00B4:  MOVWF  3D
00B5:  MOVWF  3E
00B6:  CALL   045
....................       break;  
00B7:  GOTO   0DC
....................        
....................       case 1 :  
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
00B8:  SWAPF  3B,W
00B9:  MOVWF  20
00BA:  MOVLW  F0
00BB:  ANDWF  20,F
00BC:  MOVF   20,W
00BD:  IORLW  01
00BE:  IORWF  28,W
00BF:  MOVWF  3D
00C0:  MOVWF  3E
00C1:  CALL   045
....................       delay_cycles(1);  
00C2:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED );  
00C3:  SWAPF  3B,W
00C4:  MOVWF  20
00C5:  MOVLW  F0
00C6:  ANDWF  20,F
00C7:  MOVF   20,W
00C8:  IORLW  01
00C9:  IORLW  04
00CA:  IORWF  28,W
00CB:  MOVWF  3D
00CC:  MOVWF  3E
00CD:  CALL   045
....................       delay_us(2);  
00CE:  MOVLW  03
00CF:  MOVWF  20
00D0:  DECFSZ 20,F
00D1:  GOTO   0D0
....................       i2c_write(data_shifted & RS | BACKLIGHT_LED);  
00D2:  SWAPF  3B,W
00D3:  MOVWF  20
00D4:  MOVLW  F0
00D5:  ANDWF  20,F
00D6:  MOVF   20,W
00D7:  ANDLW  01
00D8:  IORWF  28,W
00D9:  MOVWF  3D
00DA:  MOVWF  3E
00DB:  CALL   045
....................       break;  
....................    }  
00DC:  RETURN
.................... }  
....................      
.................... void lcd_send_byte(byte data, byte type)  
....................    {  
....................         i2c_start();  
00DD:  BSF    03.5
00DE:  BSF    05.1
00DF:  MOVLW  04
00E0:  BCF    03.5
00E1:  MOVWF  20
00E2:  DECFSZ 20,F
00E3:  GOTO   0E2
00E4:  BSF    03.5
00E5:  BSF    05.0
00E6:  MOVLW  03
00E7:  BCF    03.5
00E8:  MOVWF  20
00E9:  DECFSZ 20,F
00EA:  GOTO   0E9
00EB:  BCF    05.1
00EC:  BSF    03.5
00ED:  BCF    05.1
00EE:  MOVLW  04
00EF:  BCF    03.5
00F0:  MOVWF  20
00F1:  DECFSZ 20,F
00F2:  GOTO   0F1
00F3:  BCF    05.0
00F4:  BSF    03.5
00F5:  BCF    05.0
....................         i2c_write(LCD_ADDR);  
00F6:  BCF    03.5
00F7:  MOVF   24,W
00F8:  MOVWF  3E
00F9:  CALL   045
....................         i2c_send_nibble(data >> 4 , type);  
00FA:  SWAPF  38,W
00FB:  MOVWF  3A
00FC:  MOVLW  0F
00FD:  ANDWF  3A,F
00FE:  MOVF   3A,W
00FF:  MOVWF  3B
0100:  MOVF   39,W
0101:  MOVWF  3C
0102:  CALL   08D
....................         i2c_send_nibble(data & 0xf , type);  
0103:  MOVF   38,W
0104:  ANDLW  0F
0105:  MOVWF  3A
0106:  MOVWF  3B
0107:  MOVF   39,W
0108:  MOVWF  3C
0109:  CALL   08D
....................         i2c_stop();         
010A:  BSF    03.5
010B:  BCF    05.1
010C:  NOP
010D:  BSF    05.0
010E:  BCF    03.5
010F:  BTFSS  05.0
0110:  GOTO   10F
0111:  MOVLW  04
0112:  MOVWF  20
0113:  DECFSZ 20,F
0114:  GOTO   113
0115:  GOTO   116
0116:  NOP
0117:  BSF    03.5
0118:  BSF    05.1
0119:  MOVLW  04
011A:  BCF    03.5
011B:  MOVWF  20
011C:  DECFSZ 20,F
011D:  GOTO   11C
011E:  RETURN
....................    }  
....................  
.................... void lcd_clear()  
.................... {   
....................         lcd_send_byte(0x01,0);  
011F:  MOVLW  01
0120:  MOVWF  38
0121:  CLRF   39
0122:  CALL   0DD
....................         delay_ms(2);  
0123:  MOVLW  02
0124:  MOVWF  32
0125:  CALL   032
....................         new_row_request=1;  
0126:  MOVLW  01
0127:  MOVWF  27
0128:  RETURN
.................... }  
....................  
.................... void lcd_init(byte ADDR, byte col, byte row)  
.................... {  
....................    byte i; 
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines  
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up. 
....................     
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module  
0129:  MOVF   2E,W
012A:  MOVWF  24
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4  
012B:  MOVF   30,W
012C:  MOVWF  25
....................    lcd_total_columns= col ; 
012D:  MOVF   2F,W
012E:  MOVWF  26
....................    disable_interrupts(GLOBAL);  
012F:  BCF    0B.6
0130:  BCF    0B.7
0131:  BTFSC  0B.7
0132:  GOTO   130
....................    delay_ms(50); //LCD power up delay  
0133:  MOVLW  32
0134:  MOVWF  32
0135:  CALL   032
....................      
....................    i2c_start();  
0136:  BSF    03.5
0137:  BSF    05.1
0138:  MOVLW  04
0139:  BCF    03.5
013A:  MOVWF  20
013B:  DECFSZ 20,F
013C:  GOTO   13B
013D:  BSF    03.5
013E:  BSF    05.0
013F:  MOVLW  03
0140:  BCF    03.5
0141:  MOVWF  20
0142:  DECFSZ 20,F
0143:  GOTO   142
0144:  BCF    05.1
0145:  BSF    03.5
0146:  BCF    05.1
0147:  MOVLW  04
0148:  BCF    03.5
0149:  MOVWF  20
014A:  DECFSZ 20,F
014B:  GOTO   14A
014C:  BCF    05.0
014D:  BSF    03.5
014E:  BCF    05.0
....................    i2c_write(LCD_ADDR);  
014F:  BCF    03.5
0150:  MOVF   24,W
0151:  MOVWF  3E
0152:  CALL   045
....................       i2c_send_nibble(0x00,0);  
0153:  CLRF   3B
0154:  CLRF   3C
0155:  CALL   08D
....................       delay_ms(15);  
0156:  MOVLW  0F
0157:  MOVWF  32
0158:  CALL   032
....................      
....................    for (i=1;i<=3;++i)     
0159:  MOVLW  01
015A:  MOVWF  31
015B:  MOVF   31,W
015C:  SUBLW  03
015D:  BTFSS  03.0
015E:  GOTO   168
....................    {  
....................       i2c_send_nibble(0x03,0);  
015F:  MOVLW  03
0160:  MOVWF  3B
0161:  CLRF   3C
0162:  CALL   08D
....................       delay_ms(5);  
0163:  MOVLW  05
0164:  MOVWF  32
0165:  CALL   032
0166:  INCF   31,F
0167:  GOTO   15B
....................    }     
....................       i2c_send_nibble(0x02,0);  
0168:  MOVLW  02
0169:  MOVWF  3B
016A:  CLRF   3C
016B:  CALL   08D
....................       delay_ms(5);  
016C:  MOVLW  05
016D:  MOVWF  32
016E:  CALL   032
....................    i2c_stop();  
016F:  BSF    03.5
0170:  BCF    05.1
0171:  NOP
0172:  BSF    05.0
0173:  BCF    03.5
0174:  BTFSS  05.0
0175:  GOTO   174
0176:  MOVLW  04
0177:  MOVWF  20
0178:  DECFSZ 20,F
0179:  GOTO   178
017A:  GOTO   17B
017B:  NOP
017C:  BSF    03.5
017D:  BSF    05.1
017E:  MOVLW  04
017F:  BCF    03.5
0180:  MOVWF  20
0181:  DECFSZ 20,F
0182:  GOTO   181
....................      
....................    for (i=0;i<=3;++i) {  
0183:  CLRF   31
0184:  MOVF   31,W
0185:  SUBLW  03
0186:  BTFSS  03.0
0187:  GOTO   193
....................    lcd_send_byte(LCD_INIT_STRING[i],0);  
0188:  MOVF   31,W
0189:  CALL   004
018A:  MOVWF  32
018B:  MOVWF  38
018C:  CLRF   39
018D:  CALL   0DD
....................    delay_ms(5);  
018E:  MOVLW  05
018F:  MOVWF  32
0190:  CALL   032
0191:  INCF   31,F
0192:  GOTO   184
....................    }  
....................    lcd_clear();  //Clear Display  
0193:  CALL   11F
....................    enable_interrupts(GLOBAL);  
0194:  MOVLW  C0
0195:  IORWF  0B,F
0196:  GOTO   26B (RETURN)
.................... }  
....................  
.................... void lcd_gotoxy( byte x, byte y)  
.................... {  
.................... byte row,column,row_addr,lcd_address;  
.................... static char data;  
*
0263:  CLRF   29
....................  
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y;  
*
01AC:  MOVF   32,W
01AD:  SUBWF  25,W
01AE:  BTFSC  03.0
01AF:  GOTO   1B3
01B0:  MOVF   25,W
01B1:  MOVWF  33
01B2:  GOTO   1B5
01B3:  MOVF   32,W
01B4:  MOVWF  33
....................    
....................    switch(row)  
01B5:  MOVF   33,W
01B6:  XORLW  01
01B7:  BTFSC  03.2
01B8:  GOTO   1C3
01B9:  XORLW  03
01BA:  BTFSC  03.2
01BB:  GOTO   1C5
01BC:  XORLW  01
01BD:  BTFSC  03.2
01BE:  GOTO   1C8
01BF:  XORLW  07
01C0:  BTFSC  03.2
01C1:  GOTO   1CB
01C2:  GOTO   1CE
....................    {  
....................       case 1:  row_addr=addr_row_one;     break;  
01C3:  CLRF   35
01C4:  GOTO   1CF
....................       case 2:  row_addr=addr_row_two;     break;  
01C5:  MOVLW  40
01C6:  MOVWF  35
01C7:  GOTO   1CF
....................       case 3:  row_addr=addr_row_three;   break;  
01C8:  MOVLW  14
01C9:  MOVWF  35
01CA:  GOTO   1CF
....................       case 4:  row_addr=addr_row_four;    break;  
01CB:  MOVLW  54
01CC:  MOVWF  35
01CD:  GOTO   1CF
....................       default: row_addr=addr_row_one;     break;   
01CE:  CLRF   35
....................    }   
....................      
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;   
01CF:  MOVF   31,W
01D0:  SUBWF  26,W
01D1:  BTFSC  03.0
01D2:  GOTO   1D6
01D3:  MOVF   26,W
01D4:  MOVWF  34
01D5:  GOTO   1D8
01D6:  MOVF   31,W
01D7:  MOVWF  34
....................    lcd_address=(row_addr+(column-1));  
01D8:  MOVLW  01
01D9:  SUBWF  34,W
01DA:  ADDWF  35,W
01DB:  MOVWF  36
....................    lcd_send_byte(0x80|lcd_address,0);  
01DC:  MOVF   36,W
01DD:  IORLW  80
01DE:  MOVWF  37
01DF:  MOVWF  38
01E0:  CLRF   39
01E1:  CALL   0DD
01E2:  RETURN
.................... }  
....................  
.................... //Display the character on LCD screen.  
.................... void LCD_PUTC(char in_data)  
.................... {     
....................   switch(in_data)  
01E3:  MOVF   30,W
01E4:  XORLW  0C
01E5:  BTFSC  03.2
01E6:  GOTO   1EE
01E7:  XORLW  06
01E8:  BTFSC  03.2
01E9:  GOTO   1F0
01EA:  XORLW  02
01EB:  BTFSC  03.2
01EC:  GOTO   1FD
01ED:  GOTO   202
....................    {   
....................      case '\f': lcd_clear();                       break;                 
01EE:  CALL   11F
01EF:  GOTO   207
....................        
....................      case '\n':  
....................      new_row_request++;  
01F0:  INCF   27,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1;  
01F1:  MOVF   27,W
01F2:  SUBWF  25,W
01F3:  BTFSC  03.0
01F4:  GOTO   1F7
01F5:  MOVLW  01
01F6:  MOVWF  27
....................      lcd_gotoxy(1, new_row_request);  
01F7:  MOVLW  01
01F8:  MOVWF  31
01F9:  MOVF   27,W
01FA:  MOVWF  32
01FB:  CALL   1AC
....................      break;  
01FC:  GOTO   207
....................                    
....................      case '\b': lcd_send_byte(0x10,0);             break;  
01FD:  MOVLW  10
01FE:  MOVWF  38
01FF:  CLRF   39
0200:  CALL   0DD
0201:  GOTO   207
....................          
....................      default: lcd_send_byte(in_data,1);            break;       
0202:  MOVF   30,W
0203:  MOVWF  38
0204:  MOVLW  01
0205:  MOVWF  39
0206:  CALL   0DD
....................        
....................    }  
0207:  RETURN
.................... }  
....................  
....................  
.................... void main() 
*
0252:  MOVF   03,W
0253:  ANDLW  1F
0254:  MOVWF  03
0255:  MOVLW  01
0256:  MOVWF  27
0257:  MOVLW  08
0258:  MOVWF  28
0259:  CLRF   2A
025A:  BCF    1F.6
025B:  BSF    03.5
025C:  BCF    1F.0
025D:  BCF    1F.1
025E:  BCF    1F.2
025F:  BCF    1F.3
0260:  MOVLW  07
0261:  BCF    03.5
0262:  MOVWF  19
.................... { 
....................  lcd_init(0X4E,20,4); 
*
0264:  MOVLW  4E
0265:  MOVWF  2E
0266:  MOVLW  14
0267:  MOVWF  2F
0268:  MOVLW  04
0269:  MOVWF  30
026A:  GOTO   129
....................  setup_adc_ports(sAN2); 
026B:  BCF    1F.6
026C:  BSF    03.5
026D:  BCF    1F.0
026E:  BCF    1F.1
026F:  BSF    1F.2
0270:  BCF    1F.3
....................  setup_adc(ADC_CLOCK_INTERNAL); 
0271:  BSF    1F.4
0272:  BSF    1F.5
0273:  BCF    1F.6
0274:  BCF    03.5
0275:  BSF    1F.7
0276:  BSF    1F.0
....................  INT16 analogico;  
....................  int8  temperatura; 
....................    while(TRUE) 
....................    { 
....................       set_adc_channel(2); 
0277:  MOVLW  08
0278:  MOVWF  21
0279:  MOVF   1F,W
027A:  ANDLW  F3
027B:  IORWF  21,W
027C:  MOVWF  1F
....................       delay_ms(20); 
027D:  MOVLW  14
027E:  MOVWF  32
027F:  CALL   032
....................       analogico = read_adc(); 
0280:  BSF    1F.1
0281:  BTFSC  1F.1
0282:  GOTO   281
0283:  BSF    03.5
0284:  MOVF   1E,W
0285:  BCF    03.5
0286:  MOVWF  2B
0287:  MOVF   1E,W
0288:  MOVWF  2C
....................       temperatura = analogico * 5 * 100 / 1024; 
0289:  MOVF   2C,W
028A:  MOVWF  31
028B:  MOVF   2B,W
028C:  MOVWF  30
028D:  CLRF   33
028E:  MOVLW  05
028F:  MOVWF  32
0290:  CALL   197
0291:  MOVF   22,W
0292:  MOVWF  2F
0293:  MOVF   21,W
0294:  MOVWF  2E
0295:  MOVF   22,W
0296:  MOVWF  31
0297:  MOVF   21,W
0298:  MOVWF  30
0299:  CLRF   33
029A:  MOVLW  64
029B:  MOVWF  32
029C:  CALL   197
029D:  MOVF   22,W
029E:  MOVWF  2F
029F:  CLRF   23
02A0:  RRF    22,W
02A1:  MOVWF  22
02A2:  RRF    22,F
02A3:  MOVLW  3F
02A4:  ANDWF  22,F
02A5:  MOVF   22,W
02A6:  MOVWF  2D
....................       delay_ms(100); 
02A7:  MOVLW  64
02A8:  MOVWF  32
02A9:  CALL   032
....................       lcd_gotoxy(1,1); 
02AA:  MOVLW  01
02AB:  MOVWF  31
02AC:  MOVWF  32
02AD:  CALL   1AC
....................       lcd_putc("JOSE ID 16/04/22"); 
02AE:  CLRF   2E
02AF:  MOVF   2E,W
02B0:  CALL   00C
02B1:  IORLW  00
02B2:  BTFSC  03.2
02B3:  GOTO   2B8
02B4:  INCF   2E,F
02B5:  MOVWF  30
02B6:  CALL   1E3
02B7:  GOTO   2AF
....................       lcd_gotoxy(1,2); 
02B8:  MOVLW  01
02B9:  MOVWF  31
02BA:  MOVLW  02
02BB:  MOVWF  32
02BC:  CALL   1AC
....................       lcd_putc("TEMPERATURA:"); 
02BD:  CLRF   2E
02BE:  MOVF   2E,W
02BF:  CALL   021
02C0:  IORLW  00
02C1:  BTFSC  03.2
02C2:  GOTO   2C7
02C3:  INCF   2E,F
02C4:  MOVWF  30
02C5:  CALL   1E3
02C6:  GOTO   2BE
....................       delay_ms(200); 
02C7:  MOVLW  C8
02C8:  MOVWF  32
02C9:  CALL   032
....................       printf(lcd_putc," %u ", temperatura); 
02CA:  MOVLW  20
02CB:  MOVWF  30
02CC:  CALL   1E3
02CD:  MOVF   2D,W
02CE:  MOVWF  2E
02CF:  MOVLW  1B
02D0:  MOVWF  2F
02D1:  GOTO   21D
02D2:  MOVLW  20
02D3:  MOVWF  30
02D4:  CALL   1E3
....................       delay_ms(1000); 
02D5:  MOVLW  04
02D6:  MOVWF  2E
02D7:  MOVLW  FA
02D8:  MOVWF  32
02D9:  CALL   032
02DA:  DECFSZ 2E,F
02DB:  GOTO   2D7
02DC:  GOTO   277
....................  
....................    } 
....................  
.................... } 
02DD:  SLEEP

Configuration Fuses:
   Word  1: 3FC2   HS NOWDT PUT NOMCLR BROWNOUT NOPROTECT NOCPD
