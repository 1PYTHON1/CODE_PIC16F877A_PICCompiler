D G "__PCM__" 0 31 ""5.042""
D G "__DEVICE__" 0 31 "675"
D G "__DATE__" 0 31 ""17-Abr.-20""
D G "__TIME__" 0 31 ""11:50:38""
D G "??0" 0 31 "" "Standard Header file for the PIC12F675 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 37 ""
v L "value" 2 37 "int8" `53 
f B "set_tris_a" 2 37 "void(int8 value)" `52 
f N "get_tris_a" 2 38 ""
f B "get_tris_a" 2 38 "int8()" `54 
f N "output_a" 2 39 ""
v L "value" 2 39 "int8" `56 
f B "output_a" 2 39 "void(int8 value)" `55 
f N "input_a" 2 40 ""
f B "input_a" 2 40 "int8()" `57 
f N "input_change_a" 2 41 ""
f B "input_change_a" 2 41 "int8()" `58 
f N "port_a_pullups" 2 42 ""
v L "value" 2 42 "int8" `60 
f B "port_a_pullups" 2 42 "void(int8 value)" `59 
f N "input" 2 43 ""
v L "pin" 2 43 "int16" `62 
f B "input" 2 43 "int8(int16 pin)" `61 
f N "input_state" 2 44 ""
v L "pin" 2 44 "int16" `64 
f B "input_state" 2 44 "int8(int16 pin)" `63 
f N "output_low" 2 45 ""
v L "pin" 2 45 "int16" `66 
f B "output_low" 2 45 "void(int16 pin)" `65 
f N "output_high" 2 46 ""
v L "pin" 2 46 "int16" `68 
f B "output_high" 2 46 "void(int16 pin)" `67 
f N "output_toggle" 2 47 ""
v L "pin" 2 47 "int16" `70 
f B "output_toggle" 2 47 "void(int16 pin)" `69 
f N "output_bit" 2 48 ""
v L "pin" 2 48 "int16" `72 
v L "level" 2 48 "int8" `73 
f B "output_bit" 2 48 "void(int16 pin,int8 level)" `71 
f N "output_float" 2 49 ""
v L "pin" 2 49 "int16" `75 
f B "output_float" 2 49 "void(int16 pin)" `74 
f N "output_drive" 2 50 ""
v L "pin" 2 50 "int16" `77 
f B "output_drive" 2 50 "void(int16 pin)" `76  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 54 "40"
d G "PIN_A1" 2 55 "41"
d G "PIN_A2" 2 56 "42"
d G "PIN_A3" 2 57 "43"
d G "PIN_A4" 2 58 "44"
d G "PIN_A5" 2 59 "45"
d G "FALSE" 2 62 "0"
d G "TRUE" 2 63 "1"
d G "BYTE" 2 65 "int8"
d G "BOOLEAN" 2 66 "int1"
d G "getc" 2 68 "getch"
d G "fgetc" 2 69 "getch"
d G "getchar" 2 70 "getch"
d G "putc" 2 71 "putchar"
d G "fputc" 2 72 "putchar"
d G "fgets" 2 73 "gets"
d G "fputs" 2 74 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 79 ""
f B "restart_cause" 2 79 "int8()" `78 
f N "reset_cpu" 2 80 ""
f B "reset_cpu" 2 80 "void()" `79 
f N "sleep" 2 81 ""
f B "sleep" 2 81 "void()" `80  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 83 "3"
d G "WDT_TIMEOUT" 2 84 "11"
d G "MCLR_FROM_SLEEP" 2 85 "19"
d G "MCLR_FROM_RUN" 2 86 "27"
d G "NORMAL_POWER_UP" 2 87 "25"
d G "BROWNOUT_RESTART" 2 88 "26"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 95 ""
v L "mode" 2 95 "int8" `82 
f B "setup_timer_0" 2 95 "void(int8 mode)" `81 
f N "set_timer0" 2 96 ""
v L "value" 2 96 "int8" `84 
f B "set_timer0" 2 96 "void(int8 value)" `83 
f N "get_timer0" 2 97 ""
f B "get_timer0" 2 97 "int8()" `85 
f N "setup_counters" 2 98 ""
v L "mode" 2 98 "int8" `87 
v L "prescaler" 2 98 "int8" `88 
f B "setup_counters" 2 98 "void(int8 mode,int8 prescaler)" `86 
f N "set_rtcc" 2 99 ""
v L "value" 2 99 "int8" `90 
f B "set_rtcc" 2 99 "void(int8 value)" `89 
f N "get_rtcc" 2 100 ""
f B "get_rtcc" 2 100 "int8()" `91  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 102 "0"
d G "T0_EXT_L_TO_H" 2 103 "32"
d G "T0_EXT_H_TO_L" 2 104 "48"
d G "T0_DIV_1" 2 106 "8"
d G "T0_DIV_2" 2 107 "0"
d G "T0_DIV_4" 2 108 "1"
d G "T0_DIV_8" 2 109 "2"
d G "T0_DIV_16" 2 110 "3"
d G "T0_DIV_32" 2 111 "4"
d G "T0_DIV_64" 2 112 "5"
d G "T0_DIV_128" 2 113 "6"
d G "T0_DIV_256" 2 114 "7"
d G "T0_8_BIT" 2 117 "0"
d G "RTCC_INTERNAL" 2 119 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 120 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 121 "48"
d G "RTCC_DIV_1" 2 122 "8"
d G "RTCC_DIV_2" 2 123 "0"
d G "RTCC_DIV_4" 2 124 "1"
d G "RTCC_DIV_8" 2 125 "2"
d G "RTCC_DIV_16" 2 126 "3"
d G "RTCC_DIV_32" 2 127 "4"
d G "RTCC_DIV_64" 2 128 "5"
d G "RTCC_DIV_128" 2 129 "6"
d G "RTCC_DIV_256" 2 130 "7"
d G "RTCC_8_BIT" 2 131 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 142 ""
v L "mode" 2 142 "int16" `93 
f B "setup_wdt" 2 142 "void(int16 mode)" `92 
f N "restart_wdt" 2 143 ""
f B "restart_wdt" 2 143 "void()" `94  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 146 "8"
d G "WDT_36MS" 2 147 "9"
d G "WDT_72MS" 2 148 "10"
d G "WDT_144MS" 2 149 "11"
d G "WDT_288MS" 2 150 "12"
d G "WDT_576MS" 2 151 "13"
d G "WDT_1152MS" 2 152 "14"
d G "WDT_2304MS" 2 153 "15"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 159 ""
v L "mode" 2 159 "int16" `96 
f B "setup_timer_1" 2 159 "void(int16 mode)" `95 
f N "get_timer1" 2 160 ""
f B "get_timer1" 2 160 "int16()" `97 
f N "set_timer1" 2 161 ""
v L "value" 2 161 "int16" `99 
f B "set_timer1" 2 161 "void(int16 value)" `98  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 164 "0"
d G "T1_INTERNAL" 2 165 "5"
d G "T1_EXTERNAL" 2 166 "7"
d G "T1_EXTERNAL_SYNC" 2 167 "3"
d G "T1_CLK_OUT" 2 169 "8"
d G "T1_DIV_BY_1" 2 171 "0"
d G "T1_DIV_BY_2" 2 172 "0x10"
d G "T1_DIV_BY_4" 2 173 "0x20"
d G "T1_DIV_BY_8" 2 174 "0x30"
d G "T1_GATE" 2 176 "0x40"
d G "T1_GATE_INVERTED" 2 177 "0xC0"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 182 ""
v L "mode" 2 182 "int32" `101 
f B "setup_comparator" 2 182 "void(int32 mode)" `100  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 184 "0x0ff07"
d G "NC_NC" 2 185 "0x0ff07"
d G "A0_A1" 2 186 "0x3ff02"
d G "A1_VR_OUT_ON_A2" 2 187 "0x6fb03"
d G "A1_VR" 2 188 "0x2ff04"
d G "A0_A1_OUT_ON_A2" 2 189 "0x3fb01"
d G "COMP_INVERT" 2 192 "0x10"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 198 ""
v L "mode" 2 198 "int8" `104 
f B "setup_vref" 2 198 "void(int8 mode)" `103  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 200 "0xa0"
d G "VREF_HIGH" 2 201 "0x80"
c L "setup_vref" 2 3 5 "FUNCTION"
f N "setup_adc" 2 209 ""
v L "mode" 2 209 "int16" `106 
f B "setup_adc" 2 209 "void(int16 mode)" `105 
f N "read_adc" 2 210 ""
f B "read_adc" 2 210 "int8()" `107 
f N "read_adc" 2 211 ""
v L "mode" 2 211 "int8" `109 
f G "read_adc" 2 211 "int8(int8 mode)" `108 
f N "read_adc" 2 212 ""
f G "read_adc" 2 212 "int16()" `110 
f N "read_adc" 2 213 ""
v L "mode" 2 213 "int8" `112 
f G "read_adc" 2 213 "int16(int8 mode)" `111 
f N "adc_done" 2 214 ""
f B "adc_done" 2 214 "int8()" `113  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 216 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 217 "0x100"
d G "ADC_CLOCK_DIV_4" 2 218 "0x40"
d G "ADC_CLOCK_DIV_8" 2 219 "0x10"
d G "ADC_CLOCK_DIV_16" 2 220 "0x50"
d G "ADC_CLOCK_DIV_32" 2 221 "0x20"
d G "ADC_CLOCK_DIV_64" 2 222 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 223 "0x30" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 226 ""
v L "pins" 2 226 "int16" `115 
f B "setup_adc_ports" 2 226 "void(int16 pins)" `114 
f N "setup_adc_ports" 2 227 ""
v L "pins" 2 227 "int16" `117 
v L "reference" 2 227 "int16" `118 
f G "setup_adc_ports" 2 227 "void(int16 pins,int16 reference)" `116 
f N "set_analog_pins" 2 228 ""
v L "pins" 2 228 "int16" `120 
f B "set_analog_pins" 2 228 "void(int16 pins)" `119 
f N "set_analog_pins" 2 229 ""
v L "pins" 2 229 "int16" `122 
v L "reference" 2 229 "int16" `123 
f G "set_analog_pins" 2 229 "void(int16 pins,int16 reference)" `121 
f N "set_adc_channel" 2 230 ""
v L "channel" 2 230 "int8" `125 
f B "set_adc_channel" 2 230 "void(int8 channel)" `124  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 2 234 "1" "| GP0"
d G "sAN1" 2 235 "2" "| GP1"
d G "sAN2" 2 236 "4" "| GP2"
d G "sAN3" 2 237 "8" "| GP4"
d G "NO_ANALOGS" 2 238 "0" "None"
d G "AN0_ANALOG" 2 239 "1" "!old only provided for compatibility"
d G "AN1_ANALOG" 2 240 "2" "!old only provided for compatibility"
d G "AN2_ANALOG" 2 241 "4" "!old only provided for compatibility"
d G "AN3_ANALOG" 2 242 "8" "!old only provided for compatibility"
d G "ALL_ANALOG" 2 243 "7" "!old only provided for compatibility"
d G "VSS_VDD" 2 246 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 2 247 "0x4000" "| Range 0-Vref"
d G "ADC_START_AND_READ" 2 250 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 251 "1"
d G "ADC_READ_ONLY" 2 252 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 258 ""
v L "x" 2 258 "sint8" `127 
f B "abs" 2 258 "sint8(sint8 x)" `126 
f N "abs" 2 259 ""
v L "x" 2 259 "sint16" `129 
f G "abs" 2 259 "sint16(sint16 x)" `128 
f N "abs" 2 260 ""
v L "x" 2 260 "sint32" `131 
f G "abs" 2 260 "sint32(sint32 x)" `130 
f N "abs" 2 261 ""
v L "x" 2 261 "float" `133 
f G "abs" 2 261 "float(float x)" `132 
f N "_mul" 2 262 ""
v L "??65535" 2 262 "int8" `135 
v L "??65535" 2 262 "int8" `136 
f B "_mul" 2 262 "int16(int8 ,int8 )" `134 
f N "_mul" 2 263 ""
v L "??65535" 2 263 "sint8" `135 
v L "??65535" 2 263 "sint8" `139 
f G "_mul" 2 263 "sint16(sint8 ,sint8 )" `137 
f N "_mul" 2 264 ""
v L "??65535" 2 264 "int16" `135 
v L "??65535" 2 264 "int16" `142 
f G "_mul" 2 264 "int32(int16 ,int16 )" `140 
f N "_mul" 2 265 ""
v L "??65535" 2 265 "sint16" `135 
v L "??65535" 2 265 "sint16" `145 
f G "_mul" 2 265 "sint32(sint16 ,sint16 )" `143  "Memory Manipulation Prototypes:"
f N "read_bank" 2 268 ""
v L "bank" 2 268 "int8" `147 
v L "offset" 2 268 "int8" `148 
f B "read_bank" 2 268 "int8(int8 bank,int8 offset)" `146 
f N "write_bank" 2 269 ""
v L "bank" 2 269 "int8" `150 
v L "offset" 2 269 "int8" `151 
v L "value" 2 269 "int8" `152 
f B "write_bank" 2 269 "void(int8 bank,int8 offset,int8 value)" `149 
f N "strcpy" 2 270 ""
v L "dest" 2 270 "*int8" `154 
v L "src" 2 270 "*int8" `155 
f B "strcpy" 2 270 "void(*int8 dest,*int8 src)" `153 
f N "memset" 2 271 ""
v L "destination" 2 271 "*int8" `157 
v L "value" 2 271 "int8" `158 
v L "num" 2 271 "int16" `159 
f B "memset" 2 271 "void(*int8 destination,int8 value,int16 num)" `156 
f N "memcpy" 2 272 ""
v L "destination" 2 272 "*int8" `161 
v L "source" 2 272 "*int8" `162 
v L "num" 2 272 "int16" `163 
f B "memcpy" 2 272 "void(*int8 destination,*int8 source,int16 num)" `160  "String Prototypes:"
f N "toupper" 2 275 ""
v L "cvalue" 2 275 "int8" `165 
f B "toupper" 2 275 "int8(int8 cvalue)" `164 
f N "tolower" 2 276 ""
v L "cvalue" 2 276 "int8" `167 
f B "tolower" 2 276 "int8(int8 cvalue)" `166 
f N "sprintf" 2 277 ""
v L "string" 2 277 "*int8" `169 
v L "cstring" 2 277 "*int8" `170 
f B "sprintf" 2 277 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `168  "Data Manipulators Prototypes:"
f N "shift_left" 2 280 ""
v L "address" 2 280 "*int8" `173 
v L "bytes" 2 280 "int8" `174 
v L "value" 2 280 "int8" `175 
f B "shift_left" 2 280 "int8(*int8 address,int8 bytes,int8 value)" `172 
f N "shift_right" 2 281 ""
v L "address" 2 281 "*int8" `177 
v L "bytes" 2 281 "int8" `178 
v L "value" 2 281 "int8" `179 
f B "shift_right" 2 281 "int8(*int8 address,int8 bytes,int8 value)" `176 
f N "rotate_left" 2 282 ""
v L "address" 2 282 "*int8" `181 
v L "bytes" 2 282 "int8" `182 
f B "rotate_left" 2 282 "void(*int8 address,int8 bytes)" `180 
f N "rotate_right" 2 283 ""
v L "address" 2 283 "*int8" `184 
v L "bytes" 2 283 "int8" `185 
f B "rotate_right" 2 283 "void(*int8 address,int8 bytes)" `183 
f N "swap" 2 284 ""
v L "value" 2 284 "int8" `187 
f B "swap" 2 284 "void(int8 value)" `186 
f N "make8" 2 285 ""
v L "var" 2 285 "int16" `189 
v L "offset" 2 285 "int8" `190 
f B "make8" 2 285 "int8(int16 var,int8 offset)" `188 
f N "make8" 2 286 ""
v L "var" 2 286 "int32" `189 
v L "offset" 2 286 "int8" `193 
f G "make8" 2 286 "int8(int32 var,int8 offset)" `191 
f N "make16" 2 287 ""
v L "varhigh" 2 287 "int8" `195 
v L "varlow" 2 287 "int8" `196 
f B "make16" 2 287 "int16(int8 varhigh,int8 varlow)" `194 
f N "make32" 2 288 ""
v L "var1" 2 288 "int16" `198 
f B "make32" 2 288 "int32(int16 var1)" `197 
f N "make32" 2 289 ""
v L "var1" 2 289 "int16" `200 
v L "var2" 2 289 "int16" `201 
f G "make32" 2 289 "int32(int16 var1,int16 var2)" `199 
f N "make32" 2 290 ""
v L "var1" 2 290 "int16" `200 
v L "var2" 2 290 "int8" `204 
f G "make32" 2 290 "int32(int16 var1,int8 var2)" `202 
f N "make32" 2 291 ""
v L "var1" 2 291 "int16" `206 
v L "var2" 2 291 "int8" `207 
v L "var3" 2 291 "int8" `208 
f G "make32" 2 291 "int32(int16 var1,int8 var2,int8 var3)" `205 
f N "make32" 2 292 ""
v L "var1" 2 292 "int8" `210 
f G "make32" 2 292 "int32(int8 var1)" `209 
f N "make32" 2 293 ""
v L "var1" 2 293 "int8" `200 
v L "var2" 2 293 "int8" `213 
f G "make32" 2 293 "int32(int8 var1,int8 var2)" `211 
f N "make32" 2 294 ""
v L "var1" 2 294 "int8" `206 
v L "var2" 2 294 "int8" `207 
v L "var3" 2 294 "int8" `217 
f G "make32" 2 294 "int32(int8 var1,int8 var2,int8 var3)" `214 
f N "make32" 2 295 ""
v L "var1" 2 295 "int8" `219 
v L "var2" 2 295 "int8" `220 
v L "var3" 2 295 "int8" `221 
v L "var4" 2 295 "int8" `222 
f G "make32" 2 295 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `218 
f N "make32" 2 296 ""
v L "var1" 2 296 "int8" `200 
v L "var2" 2 296 "int16" `225 
f G "make32" 2 296 "int32(int8 var1,int16 var2)" `223 
f N "make32" 2 297 ""
v L "var1" 2 297 "int8" `206 
v L "var2" 2 297 "int16" `207 
v L "var3" 2 297 "int8" `229 
f G "make32" 2 297 "int32(int8 var1,int16 var2,int8 var3)" `226 
f N "make32" 2 298 ""
v L "var1" 2 298 "int8" `206 
v L "var2" 2 298 "int8" `207 
v L "var3" 2 298 "int16" `233 
f G "make32" 2 298 "int32(int8 var1,int8 var2,int16 var3)" `230 
f N "bit_set" 2 299 ""
v L "var" 2 299 "int8" `235 
v L "bit" 2 299 "int8" `236 
f B "bit_set" 2 299 "void(int8 var,int8 bit)" `234 
f N "bit_set" 2 300 ""
v L "var" 2 300 "int16" `235 
v L "bit" 2 300 "int8" `239 
f G "bit_set" 2 300 "void(int16 var,int8 bit)" `237 
f N "bit_set" 2 301 ""
v L "var" 2 301 "int32" `235 
v L "bit" 2 301 "int8" `242 
f G "bit_set" 2 301 "void(int32 var,int8 bit)" `240 
f N "bit_clear" 2 302 ""
v L "var" 2 302 "int8" `244 
v L "bit" 2 302 "int8" `245 
f B "bit_clear" 2 302 "void(int8 var,int8 bit)" `243 
f N "bit_clear" 2 303 ""
v L "var" 2 303 "int16" `244 
v L "bit" 2 303 "int8" `248 
f G "bit_clear" 2 303 "void(int16 var,int8 bit)" `246 
f N "bit_clear" 2 304 ""
v L "var" 2 304 "int32" `244 
v L "bit" 2 304 "int8" `251 
f G "bit_clear" 2 304 "void(int32 var,int8 bit)" `249 
f N "bit_test" 2 305 ""
v L "var" 2 305 "int8" `253 
v L "bit" 2 305 "int8" `254 
f B "bit_test" 2 305 "int8(int8 var,int8 bit)" `252 
f N "bit_test" 2 306 ""
v L "var" 2 306 "int16" `253 
v L "bit" 2 306 "int8" `257 
f G "bit_test" 2 306 "int8(int16 var,int8 bit)" `255 
f N "bit_test" 2 307 ""
v L "var" 2 307 "int32" `253 
v L "bit" 2 307 "int8" `260 
f G "bit_test" 2 307 "int8(int32 var,int8 bit)" `258  "#use delay() Prototypes:"
f N "delay_cycles" 2 310 ""
v L "count" 2 310 "int8" `262 
f B "delay_cycles" 2 310 "void(int8 count)" `261 
f N "delay_ms" 2 311 ""
v L "time" 2 311 "int16" `264 
f B "delay_ms" 2 311 "void(int16 time)" `263 
f N "delay_us" 2 312 ""
v L "time" 2 312 "int16" `266 
f B "delay_us" 2 312 "void(int16 time)" `265  "#use rs232() Prototypes:"
f N "putchar" 2 315 ""
v L "cdata" 2 315 "int8" `268 
f B "putchar" 2 315 "void(int8 cdata)" `267 
f N "putchar" 2 316 ""
v L "cdata" 2 316 "int8" `270 
v L "stream" 2 316 "int8" `271 
f G "putchar" 2 316 "void(int8 cdata,int8 stream)" `269 
f N "puts" 2 317 ""
v L "string" 2 317 "*int8" `273 
f B "puts" 2 317 "void(*int8 string)" `272 
f N "puts" 2 318 ""
v L "string" 2 318 "*int8" `275 
v L "stream" 2 318 "int8" `276 
f G "puts" 2 318 "void(*int8 string,int8 stream)" `274 
f N "getch" 2 319 ""
f B "getch" 2 319 "int8()" `277 
f N "getch" 2 320 ""
v L "stream" 2 320 "int8" `279 
f G "getch" 2 320 "int8(int8 stream)" `278 
f N "gets" 2 321 ""
v L "string" 2 321 "*int8" `281 
f B "gets" 2 321 "void(*int8 string)" `280 
f N "gets" 2 322 ""
v L "string" 2 322 "*int8" `283 
v L "stream" 2 322 "int8" `284 
f G "gets" 2 322 "void(*int8 string,int8 stream)" `282 
f N "kbhit" 2 323 ""
f B "kbhit" 2 323 "int8()" `285 
f N "kbhit" 2 324 ""
v L "stream" 2 324 "int8" `287 
f G "kbhit" 2 324 "int8(int8 stream)" `286 
f N "printf" 2 325 ""
v L "string" 2 325 "*int8" `289 
f B "printf" 2 325 "void(*int8 string,*int8 _VA_LIST)" `288 
f N "fprintf" 2 326 ""
v L "stream" 2 326 "int8" `292 
v L "string" 2 326 "*int8" `293 
f B "fprintf" 2 326 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `291 
f N "putc_send" 2 327 ""
f B "putc_send" 2 327 "void()" `295 
f N "fputc_send" 2 328 ""
v L "stream" 2 328 "int8" `297 
f B "fputc_send" 2 328 "void(int8 stream)" `296 
f N "rcv_buffer_full" 2 329 ""
f B "rcv_buffer_full" 2 329 "int8()" `298 
f N "rcv_buffer_full" 2 330 ""
v L "stream" 2 330 "int8" `300 
f G "rcv_buffer_full" 2 330 "int8(int8 stream)" `299 
f N "rcv_buffer_bytes" 2 331 ""
f B "rcv_buffer_bytes" 2 331 "int16()" `301 
f N "rcv_buffer_bytes" 2 332 ""
v L "stream" 2 332 "int8" `303 
f G "rcv_buffer_bytes" 2 332 "int16(int8 stream)" `302 
f N "tx_buffer_full" 2 333 ""
f B "tx_buffer_full" 2 333 "int8()" `304 
f N "tx_buffer_full" 2 334 ""
v L "stream" 2 334 "int8" `306 
f G "tx_buffer_full" 2 334 "int8(int8 stream)" `305 
f N "tx_buffer_bytes" 2 335 ""
f B "tx_buffer_bytes" 2 335 "int16()" `307 
f N "tx_buffer_bytes" 2 336 ""
v L "stream" 2 336 "int8" `309 
f G "tx_buffer_bytes" 2 336 "int16(int8 stream)" `308  "#use i2c() Prototypes:"
f N "i2c_read" 2 339 ""
f B "i2c_read" 2 339 "int8()" `310 
f N "i2c_read" 2 340 ""
v L "stream" 2 340 "int8" `312 
f G "i2c_read" 2 340 "int8(int8 stream)" `311 
f N "i2c_read" 2 341 ""
v L "stream" 2 341 "int8" `314 
v L "ack" 2 341 "int8" `315 
f G "i2c_read" 2 341 "int8(int8 stream,int8 ack)" `313 
f N "i2c_write" 2 342 ""
v L "data" 2 342 "int8" `317 
f B "i2c_write" 2 342 "int8(int8 data)" `316 
f N "i2c_write" 2 343 ""
v L "stream" 2 343 "int8" `319 
v L "data" 2 343 "int8" `320 
f G "i2c_write" 2 343 "int8(int8 stream,int8 data)" `318 
f N "i2c_start" 2 344 ""
f B "i2c_start" 2 344 "void()" `321 
f N "i2c_start" 2 345 ""
v L "stream" 2 345 "int8" `323 
f G "i2c_start" 2 345 "void(int8 stream)" `322 
f N "i2c_start" 2 346 ""
v L "stream" 2 346 "int8" `325 
v L "restart" 2 346 "int8" `326 
f G "i2c_start" 2 346 "void(int8 stream,int8 restart)" `324 
f N "i2c_stop" 2 347 ""
f B "i2c_stop" 2 347 "void()" `327 
f N "i2c_stop" 2 348 ""
v L "stream" 2 348 "int8" `329 
f G "i2c_stop" 2 348 "void(int8 stream)" `328 
f N "i2c_isr_state" 2 349 ""
f B "i2c_isr_state" 2 349 "int8()" `330 
f N "i2c_slaveaddr" 2 350 ""
v L "addr" 2 350 "int8" `332 
f B "i2c_slaveaddr" 2 350 "void(int8 addr)" `331 
f N "i2c_slaveaddr" 2 351 ""
v L "stream" 2 351 "int8" `334 
v L "addr" 2 351 "int8" `335 
f G "i2c_slaveaddr" 2 351 "void(int8 stream,int8 addr)" `333 
f N "i2c_poll" 2 352 ""
f B "i2c_poll" 2 352 "int8()" `336 
f N "i2c_poll" 2 353 ""
v L "stream" 2 353 "int8" `338 
f G "i2c_poll" 2 353 "int8(int8 stream)" `337 
f N "i2c_init" 2 354 ""
v L "baud" 2 354 "int32" `340 
f B "i2c_init" 2 354 "void(int32 baud)" `339 
f N "i2c_init" 2 355 ""
v L "stream" 2 355 "int8" `342 
v L "baud" 2 355 "int32" `343 
f G "i2c_init" 2 355 "void(int8 stream,int32 baud)" `341  "#use spi() Prototypes:"
f N "spi_xfer" 2 358 ""
f B "spi_xfer" 2 358 "int8()" `344 
f N "spi_xfer" 2 359 ""
f G "spi_xfer" 2 359 "int16()" `345 
f N "spi_xfer" 2 360 ""
f G "spi_xfer" 2 360 "int32()" `346 
f N "spi_xfer" 2 361 ""
v L "data" 2 361 "int8" `348 
f G "spi_xfer" 2 361 "int8(int8 data)" `347 
f N "spi_xfer" 2 362 ""
v L "data" 2 362 "int16" `350 
f G "spi_xfer" 2 362 "int16(int16 data)" `349 
f N "spi_xfer" 2 363 ""
v L "data" 2 363 "int32" `352 
f G "spi_xfer" 2 363 "int32(int32 data)" `351 
f N "spi_xfer" 2 364 ""
v L "stream" 2 364 "int8" `354 
v L "data" 2 364 "int8" `355 
f G "spi_xfer" 2 364 "int8(int8 stream,int8 data)" `353 
f N "spi_xfer" 2 365 ""
v L "stream" 2 365 "int8" `354 
v L "data" 2 365 "int16" `358 
f G "spi_xfer" 2 365 "int16(int8 stream,int16 data)" `356 
f N "spi_xfer" 2 366 ""
v L "stream" 2 366 "int8" `354 
v L "data" 2 366 "int32" `361 
f G "spi_xfer" 2 366 "int32(int8 stream,int32 data)" `359 
f N "spi_xfer" 2 367 ""
v L "stream" 2 367 "int8" `363 
v L "data" 2 367 "int8" `364 
v L "bits" 2 367 "int8" `365 
f G "spi_xfer" 2 367 "int8(int8 stream,int8 data,int8 bits)" `362 
f N "spi_xfer" 2 368 ""
v L "stream" 2 368 "int8" `363 
v L "data" 2 368 "int16" `364 
v L "bits" 2 368 "int8" `369 
f G "spi_xfer" 2 368 "int16(int8 stream,int16 data,int8 bits)" `366 
f N "spi_xfer" 2 369 ""
v L "stream" 2 369 "int8" `363 
v L "data" 2 369 "int32" `364 
v L "bits" 2 369 "int8" `373 
f G "spi_xfer" 2 369 "int32(int8 stream,int32 data,int8 bits)" `370 
f N "spi_init" 2 370 ""
v L "baud" 2 370 "int32" `375 
f B "spi_init" 2 370 "void(int32 baud)" `374 
f N "spi_init" 2 371 ""
v L "stream" 2 371 "int8" `377 
v L "baud" 2 371 "int32" `378 
f G "spi_init" 2 371 "void(int8 stream,int32 baud)" `376 
f N "spi_speed" 2 372 ""
v L "baud" 2 372 "int32" `380 
f B "spi_speed" 2 372 "void(int32 baud)" `379 
f N "spi_speed" 2 373 ""
v L "stream" 2 373 "int8" `382 
v L "baud" 2 373 "int32" `383 
f G "spi_speed" 2 373 "void(int8 stream,int32 baud)" `381 
f N "spi_speed" 2 374 ""
v L "stream" 2 374 "int8" `385 
v L "baud" 2 374 "int32" `386 
v L "clock" 2 374 "int32" `387 
f G "spi_speed" 2 374 "void(int8 stream,int32 baud,int32 clock)" `384 
f N "spi_prewrite" 2 375 ""
v L "data" 2 375 "int8" `389 
f B "spi_prewrite" 2 375 "void(int8 data)" `388 
f N "spi_prewrite" 2 376 ""
v L "data" 2 376 "int16" `391 
f G "spi_prewrite" 2 376 "void(int16 data)" `390 
f N "spi_prewrite" 2 377 ""
v L "data" 2 377 "int32" `393 
f G "spi_prewrite" 2 377 "void(int32 data)" `392 
f N "spi_prewrite" 2 378 ""
v L "??65535" 2 378 "int8" `395 
v L "data" 2 378 "int8" `396 
f G "spi_prewrite" 2 378 "void(int8 ,int8 data)" `394 
f N "spi_prewrite" 2 379 ""
v L "??65535" 2 379 "int8" `395 
v L "data" 2 379 "int16" `399 
f G "spi_prewrite" 2 379 "void(int8 ,int16 data)" `397 
f N "spi_prewrite" 2 380 ""
v L "??65535" 2 380 "int8" `395 
v L "data" 2 380 "int32" `402 
f G "spi_prewrite" 2 380 "void(int8 ,int32 data)" `400 
f N "spi_xfer_in" 2 381 ""
f B "spi_xfer_in" 2 381 "int8()" `403 
f N "spi_xfer_in" 2 382 ""
f G "spi_xfer_in" 2 382 "int16()" `404 
f N "spi_xfer_in" 2 383 ""
f G "spi_xfer_in" 2 383 "int32()" `405 
f N "spi_xfer_in" 2 384 ""
v L "bits" 2 384 "int8" `407 
f G "spi_xfer_in" 2 384 "int8(int8 bits)" `406 
f N "spi_xfer_in" 2 385 ""
v L "bits" 2 385 "int8" `409 
f G "spi_xfer_in" 2 385 "int16(int8 bits)" `408 
f N "spi_xfer_in" 2 386 ""
v L "bits" 2 386 "int8" `411 
f G "spi_xfer_in" 2 386 "int32(int8 bits)" `410 
f N "spi_xfer_in" 2 387 ""
v L "stream" 2 387 "int8" `413 
v L "bits" 2 387 "int8" `414 
f G "spi_xfer_in" 2 387 "int8(int8 stream,int8 bits)" `412 
f N "spi_xfer_in" 2 388 ""
v L "stream" 2 388 "int8" `413 
v L "bits" 2 388 "int8" `417 
f G "spi_xfer_in" 2 388 "int16(int8 stream,int8 bits)" `415 
f N "spi_xfer_in" 2 389 ""
v L "stream" 2 389 "int8" `413 
v L "bits" 2 389 "int8" `420 
f G "spi_xfer_in" 2 389 "int32(int8 stream,int8 bits)" `418  "#use rtos() Prototypes:"
f N "rtos_run" 2 392 ""
f B "rtos_run" 2 392 "void()" `421 
f N "rtos_yield" 2 393 ""
f B "rtos_yield" 2 393 "void()" `422 
f N "rtos_enable" 2 394 ""
v L "task" 2 394 "int8" `424 
f B "rtos_enable" 2 394 "void(int8 task)" `423 
f N "rtos_disable" 2 395 ""
v L "task" 2 395 "int8" `426 
f B "rtos_disable" 2 395 "void(int8 task)" `425 
f N "rtos_terminate" 2 396 ""
f B "rtos_terminate" 2 396 "void()" `427 
f N "rtos_await" 2 397 ""
v L "flag" 2 397 "int8" `429 
f B "rtos_await" 2 397 "void(int8 flag)" `428 
f N "rtos_wait" 2 398 ""
v L "sem" 2 398 "int8" `431 
f B "rtos_wait" 2 398 "void(int8 sem)" `430 
f N "rtos_signal" 2 399 ""
v L "sem" 2 399 "int8" `433 
f B "rtos_signal" 2 399 "void(int8 sem)" `432 
f N "rtos_msg_send" 2 400 ""
v L "task" 2 400 "int8" `435 
v L "msg" 2 400 "int8" `436 
f B "rtos_msg_send" 2 400 "void(int8 task,int8 msg)" `434 
f N "rtos_msg_read" 2 401 ""
f B "rtos_msg_read" 2 401 "int8()" `437 
f N "rtos_msg_poll" 2 402 ""
f B "rtos_msg_poll" 2 402 "int8()" `438 
f N "rtos_overrun" 2 403 ""
v L "task" 2 403 "int8" `440 
f B "rtos_overrun" 2 403 "int8(int8 task)" `439 
f N "rtos_stats" 2 404 ""
v L "task" 2 404 "int8" `442 
v L "stat" 2 404 "*int8" `443 
f B "rtos_stats" 2 404 "void(int8 task,*int8 stat)" `441  "#use timer() Prototypes:"
f N "get_ticks" 2 407 ""
f B "get_ticks" 2 407 "int8()" `444 
f N "get_ticks" 2 408 ""
f G "get_ticks" 2 408 "int16()" `445 
f N "get_ticks" 2 409 ""
f G "get_ticks" 2 409 "int32()" `446 
f N "get_ticks" 2 410 ""
v L "stream" 2 410 "int8" `448 
f G "get_ticks" 2 410 "int8(int8 stream)" `447 
f N "get_ticks" 2 411 ""
v L "stream" 2 411 "int8" `450 
f G "get_ticks" 2 411 "int16(int8 stream)" `449 
f N "get_ticks" 2 412 ""
v L "stream" 2 412 "int8" `452 
f G "get_ticks" 2 412 "int32(int8 stream)" `451 
f N "set_ticks" 2 413 ""
v L "value" 2 413 "int8" `454 
f B "set_ticks" 2 413 "void(int8 value)" `453 
f N "set_ticks" 2 414 ""
v L "value" 2 414 "int16" `456 
f G "set_ticks" 2 414 "void(int16 value)" `455 
f N "set_ticks" 2 415 ""
v L "value" 2 415 "int32" `458 
f G "set_ticks" 2 415 "void(int32 value)" `457 
f N "set_ticks" 2 416 ""
v L "stream" 2 416 "int8" `460 
v L "value" 2 416 "int8" `461 
f G "set_ticks" 2 416 "void(int8 stream,int8 value)" `459 
f N "set_ticks" 2 417 ""
v L "stream" 2 417 "int8" `460 
v L "value" 2 417 "int16" `464 
f G "set_ticks" 2 417 "void(int8 stream,int16 value)" `462 
f N "set_ticks" 2 418 ""
v L "stream" 2 418 "int8" `460 
v L "value" 2 418 "int32" `467 
f G "set_ticks" 2 418 "void(int8 stream,int32 value)" `465  "#use pwm() Prototypes:"
f N "pwm_on" 2 421 ""
f B "pwm_on" 2 421 "void()" `468 
f N "pwm_on" 2 422 ""
v L "stream" 2 422 "int8" `470 
f G "pwm_on" 2 422 "void(int8 stream)" `469 
f N "pwm_off" 2 423 ""
f B "pwm_off" 2 423 "void()" `471 
f N "pwm_off" 2 424 ""
v L "stream" 2 424 "int8" `473 
f G "pwm_off" 2 424 "void(int8 stream)" `472 
f N "pwm_set_duty" 2 425 ""
v L "duty" 2 425 "int16" `475 
f B "pwm_set_duty" 2 425 "void(int16 duty)" `474 
f N "pwm_set_duty" 2 426 ""
v L "stream" 2 426 "int8" `477 
v L "duty" 2 426 "int16" `478 
f G "pwm_set_duty" 2 426 "void(int8 stream,int16 duty)" `476 
f N "pwm_set_duty_percent" 2 427 ""
v L "percent" 2 427 "int16" `480 
f B "pwm_set_duty_percent" 2 427 "void(int16 percent)" `479 
f N "pwm_set_duty_percent" 2 428 ""
v L "stream" 2 428 "int8" `482 
v L "percent" 2 428 "int16" `483 
f G "pwm_set_duty_percent" 2 428 "void(int8 stream,int16 percent)" `481 
f N "pwm_set_frequency" 2 429 ""
v L "frequency" 2 429 "int32" `485 
f B "pwm_set_frequency" 2 429 "void(int32 frequency)" `484 
f N "pwm_set_frequency" 2 430 ""
v L "stream" 2 430 "int8" `487 
v L "frequency" 2 430 "int32" `488 
f G "pwm_set_frequency" 2 430 "void(int8 stream,int32 frequency)" `486  "#use capture() Prototypes:"
f N "get_capture_time" 2 433 ""
f B "get_capture_time" 2 433 "int16()" `489 
f N "get_capture_time" 2 434 ""
v L "stream" 2 434 "int8" `491 
f G "get_capture_time" 2 434 "int16(int8 stream)" `490 
f N "get_capture_event" 2 435 ""
f B "get_capture_event" 2 435 "int8()" `492 
f N "get_capture_event" 2 436 ""
v L "stream" 2 436 "int8" `494 
f G "get_capture_event" 2 436 "int8(int8 stream)" `493  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 449 ""
v L "address" 2 449 "int16" `496 
f B "goto_address" 2 449 "void(int16 address)" `495 
f N "label_address" 2 450 ""
v L "label" 2 450 "int16" `498 
f B "label_address" 2 450 "int16(int16 label)" `497  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 457 "int8" `499 
f N "read_eeprom" 2 460 ""
v L "address" 2 460 "__EEADDRESS__" `501 
f B "read_eeprom" 2 460 "int8(__EEADDRESS__ address)" `500 
f N "write_eeprom" 2 461 ""
v L "address" 2 461 "__EEADDRESS__" `503 
v L "value" 2 461 "int8" `504 
f B "write_eeprom" 2 461 "void(__EEADDRESS__ address,int8 value)" `502  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 468 ""
v L "interrupt" 2 468 "int32" `506 
f B "enable_interrupts" 2 468 "void(int32 interrupt)" `505 
f N "disable_interrupts" 2 469 ""
v L "interrupt" 2 469 "int32" `508 
f B "disable_interrupts" 2 469 "void(int32 interrupt)" `507 
f N "clear_interrupt" 2 470 ""
v L "interrupt" 2 470 "int32" `510 
f B "clear_interrupt" 2 470 "void(int32 interrupt)" `509 
f N "interrupt_active" 2 471 ""
v L "interrupt" 2 471 "int32" `512 
f B "interrupt_active" 2 471 "int8(int32 interrupt)" `511 
f N "interrupt_enabled" 2 472 ""
v L "interrupt" 2 472 "int32" `514 
f B "interrupt_enabled" 2 472 "int8(int32 interrupt)" `513 
f N "ext_int_edge" 2 473 ""
v L "source" 2 473 "int8" `516 
v L "edge" 2 473 "int8" `517 
f B "ext_int_edge" 2 473 "void(int8 source,int8 edge)" `515 
f N "jump_to_isr" 2 474 ""
v L "address" 2 474 "int16" `519 
f B "jump_to_isr" 2 474 "void(int16 address)" `518  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 476 "0x40"
d G "H_TO_L" 2 477 "0"
d G "GLOBAL" 2 479 "0x0BC0"
d G "PERIPH" 2 480 "0x0B40"
d G "INT_RTCC" 2 481 "0x000B20"
d G "INT_EXT_L2H" 2 482 "0x50000B10"
d G "INT_EXT_H2L" 2 483 "0x60000B10"
d G "INT_EXT" 2 484 "0x000B10"
d G "INT_AD" 2 485 "0x008C40"
d G "INT_TIMER1" 2 486 "0x008C01"
d G "INT_TIMER0" 2 487 "0x000B20"
d G "INT_EEPROM" 2 488 "0x008C80"
d G "INT_COMP" 2 489 "0x008C08"
d G "INT_RA" 2 490 "0x00FF0B08"
d G "INT_RA0" 2 491 "0x0010B08"
d G "INT_RA1" 2 492 "0x0020B08"
d G "INT_RA2" 2 493 "0x0040B08"
d G "INT_RA3" 2 494 "0x0080B08"
d G "INT_RA4" 2 495 "0x0100B08"
d G "INT_RA5" 2 496 "0x0200B08"
C L "jump_to_isr" 3 2 47 "FUNCTION"
V G "LCD_ADDR" 3 74 "int8" `528  "0x4E        //I2C slave address for LCD module"
V G "lcd_total_rows" 3 75 "int8" `529  "2           //Number of rows: 1,2,3 or 4"
V G "lcd_total_columns" 3 76 "int8" `530  "16          //Number of columns: 1...20"
D G "RS" 3 78 "0b00000001" "P0 - PCF8574T Pin connected to RS"
D G "RW" 3 79 "0b00000010" "P1 - PCF8574T Pin connected to RW"
D G "ENABLE" 3 80 "0b00000100" "P2 - PCF8574T Pin connected to EN"
D G "LCD_BACKLIGHT" 3 81 "0b00001000" "P3 - PCF8574T Pin connected to BACKLIGHT LED"
D G "addr_row_one" 3 83 "0x00" "LCD RAM address for row 1"
D G "addr_row_two" 3 84 "0x40" "LCD RAM address for row 2"
D G "addr_row_three" 3 85 "0x14" "LCD RAM address for row 3"
D G "addr_row_four" 3 86 "0x54" "LCD RAM address for row 4"
D G "ON" 3 88 "1"
D G "OFF" 3 89 "0"
D G "NOT" 3 90 "~"
D G "data_shifted" 3 91 "data<<4"
V G "new_row_request" 3 92 "int8" `531 
V G "BACKLIGHT_LED" 3 92 "int8" `532 
F N "lcd_backlight_led" 3 94 ""
V L "bl" 3 94 "int8" `534 
F G "lcd_backlight_led" 3 95 "void(int8 bl)" `533 
F N "i2c_send_nibble" 3 99 ""
V L "data" 3 99 "int8" `536 
V L "type" 3 99 "int8" `537 
F G "i2c_send_nibble" 3 100 "void(int8 data,int8 type)" `535 
F N "lcd_send_byte" 3 121 ""
V L "data" 3 121 "int8" `539 
V L "type" 3 121 "int8" `540 
F G "lcd_send_byte" 3 122 "void(int8 data,int8 type)" `538 
F N "lcd_clear" 3 130 ""
F G "lcd_clear" 3 131 "void()" `541 
F N "lcd_init" 3 137 ""
V L "addr" 3 137 "int8" `543 
V L "col" 3 137 "int8" `544 
V L "row" 3 137 "int8" `545 
F G "lcd_init" 3 138 "void(int8 addr,int8 col,int8 row)" `542 
V L "i" 3 139 "int8" `546 
V L "lcd_type" 3 140 "int8" `547 
C L "lcd_init" 3 2 1 "FUNCTION"
V L "LCD_INIT_STRING" 3 141 "[4]" `550 
C L "lcd_init" 3 2 1 "FUNCTION"
C L "lcd_init" 3 2 1 "FUNCTION"
C L "lcd_init" 3 2 1 "FUNCTION"
C L "lcd_init" 3 2 1 "FUNCTION"
C L "lcd_init" 3 2 1 "FUNCTION"
F N "lcd_gotoxy" 3 171 ""
V L "x" 3 171 "int8" `553 
V L "y" 3 171 "int8" `554 
F G "lcd_gotoxy" 3 172 "void(int8 x,int8 y)" `552 
V L "row" 3 173 "int8" `555 
V L "column" 3 173 "int8" `556 
V L "row_addr" 3 173 "int8" `557 
V L "lcd_address" 3 173 "int8" `558 
V L "data" 3 174 "int8" `559 
C L "LCD_PUTC" 3 2 1 "FUNCTION"
F N "LCD_PUTC" 3 193 ""
V L "in_data" 3 193 "int8" `561 
F G "LCD_PUTC" 3 194 "void(int8 in_data)" `560 
F N "MAIN" 0 5 ""
F G "MAIN" 0 6 "void()" `562 
V L "analogico" 0 10 "int16" `565 
V L "temperatura" 0 11 "int8" `566 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "input_a" 0 0
F B "set_tris_a" 1 0
F B "get_tris_a" 0 0
F B "input_change_a" 0 0
F B "port_a_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
