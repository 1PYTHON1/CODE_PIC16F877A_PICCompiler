CCS PCM C Compiler, Version 5.042, 5967               10-Abr.-20 13:49

               Filename:   C:\Users\Casa\Desktop\PIC16F877A_PICC\CONTADOR_0_99999999\CONTADOR_0_99999999.lst

               ROM used:   271 words (3%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           16 (4%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   027
0003:  NOP
.................... #include <CONTADOR_0_99999999.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  3F
0009:  RETLW  06
000A:  RETLW  5B
000B:  RETLW  4F
000C:  RETLW  66
000D:  RETLW  6D
000E:  RETLW  7D
000F:  RETLW  07
0010:  RETLW  7F
0011:  RETLW  6F
....................  
.................... #list 
....................  
.................... #fuses   XT,NOWDT,NOPUT,NOLVP,NOPROTECT   
.................... #use delay(crystal=4000000) 
0012:  MOVLW  2A
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   026
0018:  MOVLW  01
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  4A
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  GOTO   024
0024:  DECFSZ 00,F
0025:  GOTO   018
0026:  RETURN
.................... #use standard_io(b) 
.................... #use standard_io(c) 
.................... #use standard_io(d) 
.................... #use standard_io(a) 
....................  
....................  
.................... byte CONST DISPLAY[10]={0X3F,0X06,0X5B,0X4F,0X66,0X6D,0X7D,0X07,0X7F,0X6F}; 
....................  
.................... void main() 
0027:  MOVF   03,W
0028:  ANDLW  1F
0029:  MOVWF  03
002A:  MOVLW  FF
002B:  MOVWF  20
002C:  BSF    03.5
002D:  BSF    1F.0
002E:  BSF    1F.1
002F:  BSF    1F.2
0030:  BCF    1F.3
0031:  MOVLW  07
0032:  MOVWF  1C
0033:  BCF    03.7
0034:  BCF    03.5
0035:  CLRF   21
0036:  CLRF   22
0037:  CLRF   23
0038:  CLRF   24
0039:  CLRF   25
003A:  CLRF   26
003B:  CLRF   27
003C:  CLRF   28
.................... { 
.................... byte DIG1=0, DIG2=0,DIG3=0, DIG4=0,DIG5=0, DIG6=0,DIG7=0, DIG8=0; 
.................... output_C(0); 
003D:  MOVLW  00
003E:  MOVWF  20
003F:  BSF    03.5
0040:  CLRF   07
0041:  BCF    03.5
0042:  CLRF   07
.................... INT TIEMPO=1; 
0043:  MOVLW  01
0044:  MOVWF  29
....................    while(TRUE) 
....................    { 
....................     for(DIG8=0;DIG8<10;DIG8++) 
0045:  CLRF   28
0046:  MOVF   28,W
0047:  SUBLW  09
0048:  BTFSS  03.0
0049:  GOTO   10D
....................     { 
....................     for(DIG7=0;DIG7<10;DIG7++) 
004A:  CLRF   27
004B:  MOVF   27,W
004C:  SUBLW  09
004D:  BTFSS  03.0
004E:  GOTO   10B
....................     {  
....................      for(DIG6=0;DIG6<10;DIG6++) 
004F:  CLRF   26
0050:  MOVF   26,W
0051:  SUBLW  09
0052:  BTFSS  03.0
0053:  GOTO   109
....................     {  
....................      for(DIG5=0;DIG5<10;DIG5++) 
0054:  CLRF   25
0055:  MOVF   25,W
0056:  SUBLW  09
0057:  BTFSS  03.0
0058:  GOTO   107
....................     {  
....................      for(DIG4=0;DIG4<10;DIG4++) 
0059:  CLRF   24
005A:  MOVF   24,W
005B:  SUBLW  09
005C:  BTFSS  03.0
005D:  GOTO   105
....................     {  
....................      for(DIG3=0;DIG3<10;DIG3++) 
005E:  CLRF   23
005F:  MOVF   23,W
0060:  SUBLW  09
0061:  BTFSS  03.0
0062:  GOTO   103
....................     {  
....................      for(DIG2=0;DIG2<10;DIG2++) 
0063:  CLRF   22
0064:  MOVF   22,W
0065:  SUBLW  09
0066:  BTFSS  03.0
0067:  GOTO   101
....................     {  
....................      for(DIG1=0;DIG1<10;DIG1++) 
0068:  CLRF   21
0069:  MOVF   21,W
006A:  SUBLW  09
006B:  BTFSS  03.0
006C:  GOTO   0FF
....................     {  
....................     output_D(0x01); 
006D:  BSF    03.5
006E:  CLRF   08
006F:  MOVLW  01
0070:  BCF    03.5
0071:  MOVWF  08
....................     output_C(DISPLAY[DIG1]); 
0072:  MOVF   21,W
0073:  CALL   004
0074:  MOVWF  2A
0075:  MOVLW  00
0076:  MOVWF  20
0077:  BSF    03.5
0078:  CLRF   07
0079:  BCF    03.5
007A:  MOVF   2A,W
007B:  MOVWF  07
....................     delay_ms(TIEMPO); 
007C:  MOVF   29,W
007D:  MOVWF  2A
007E:  CALL   012
....................      
....................     output_D(0x02); 
007F:  BSF    03.5
0080:  CLRF   08
0081:  MOVLW  02
0082:  BCF    03.5
0083:  MOVWF  08
....................     output_C(DISPLAY[DIG2]); 
0084:  MOVF   22,W
0085:  CALL   004
0086:  MOVWF  2A
0087:  MOVLW  00
0088:  MOVWF  20
0089:  BSF    03.5
008A:  CLRF   07
008B:  BCF    03.5
008C:  MOVF   2A,W
008D:  MOVWF  07
....................     delay_ms(TIEMPO); 
008E:  MOVF   29,W
008F:  MOVWF  2A
0090:  CALL   012
....................      
....................     output_D(0x04); 
0091:  BSF    03.5
0092:  CLRF   08
0093:  MOVLW  04
0094:  BCF    03.5
0095:  MOVWF  08
....................     output_C(DISPLAY[DIG3]); 
0096:  MOVF   23,W
0097:  CALL   004
0098:  MOVWF  2A
0099:  MOVLW  00
009A:  MOVWF  20
009B:  BSF    03.5
009C:  CLRF   07
009D:  BCF    03.5
009E:  MOVF   2A,W
009F:  MOVWF  07
....................     delay_ms(TIEMPO); 
00A0:  MOVF   29,W
00A1:  MOVWF  2A
00A2:  CALL   012
....................      
....................     output_D(0x08); 
00A3:  BSF    03.5
00A4:  CLRF   08
00A5:  MOVLW  08
00A6:  BCF    03.5
00A7:  MOVWF  08
....................     output_C(DISPLAY[DIG4]); 
00A8:  MOVF   24,W
00A9:  CALL   004
00AA:  MOVWF  2A
00AB:  MOVLW  00
00AC:  MOVWF  20
00AD:  BSF    03.5
00AE:  CLRF   07
00AF:  BCF    03.5
00B0:  MOVF   2A,W
00B1:  MOVWF  07
....................     delay_ms(TIEMPO); 
00B2:  MOVF   29,W
00B3:  MOVWF  2A
00B4:  CALL   012
....................      
....................     output_D(16); 
00B5:  BSF    03.5
00B6:  CLRF   08
00B7:  MOVLW  10
00B8:  BCF    03.5
00B9:  MOVWF  08
....................     output_C(DISPLAY[DIG5]); 
00BA:  MOVF   25,W
00BB:  CALL   004
00BC:  MOVWF  2A
00BD:  MOVLW  00
00BE:  MOVWF  20
00BF:  BSF    03.5
00C0:  CLRF   07
00C1:  BCF    03.5
00C2:  MOVF   2A,W
00C3:  MOVWF  07
....................     delay_ms(TIEMPO); 
00C4:  MOVF   29,W
00C5:  MOVWF  2A
00C6:  CALL   012
....................      
....................     output_D(32); 
00C7:  BSF    03.5
00C8:  CLRF   08
00C9:  MOVLW  20
00CA:  BCF    03.5
00CB:  MOVWF  08
....................     output_C(DISPLAY[DIG6]); 
00CC:  MOVF   26,W
00CD:  CALL   004
00CE:  MOVWF  2A
00CF:  MOVLW  00
00D0:  MOVWF  20
00D1:  BSF    03.5
00D2:  CLRF   07
00D3:  BCF    03.5
00D4:  MOVF   2A,W
00D5:  MOVWF  07
....................     delay_ms(TIEMPO); 
00D6:  MOVF   29,W
00D7:  MOVWF  2A
00D8:  CALL   012
....................      
....................     output_D(64); 
00D9:  BSF    03.5
00DA:  CLRF   08
00DB:  MOVLW  40
00DC:  BCF    03.5
00DD:  MOVWF  08
....................     output_C(DISPLAY[DIG7]); 
00DE:  MOVF   27,W
00DF:  CALL   004
00E0:  MOVWF  2A
00E1:  MOVLW  00
00E2:  MOVWF  20
00E3:  BSF    03.5
00E4:  CLRF   07
00E5:  BCF    03.5
00E6:  MOVF   2A,W
00E7:  MOVWF  07
....................     delay_ms(TIEMPO); 
00E8:  MOVF   29,W
00E9:  MOVWF  2A
00EA:  CALL   012
....................      
....................     output_D(128); 
00EB:  BSF    03.5
00EC:  CLRF   08
00ED:  MOVLW  80
00EE:  BCF    03.5
00EF:  MOVWF  08
....................     output_C(DISPLAY[DIG8]); 
00F0:  MOVF   28,W
00F1:  CALL   004
00F2:  MOVWF  2A
00F3:  MOVLW  00
00F4:  MOVWF  20
00F5:  BSF    03.5
00F6:  CLRF   07
00F7:  BCF    03.5
00F8:  MOVF   2A,W
00F9:  MOVWF  07
....................     delay_ms(50); 
00FA:  MOVLW  32
00FB:  MOVWF  2A
00FC:  CALL   012
00FD:  INCF   21,F
00FE:  GOTO   069
....................     } 
00FF:  INCF   22,F
0100:  GOTO   064
....................     } 
0101:  INCF   23,F
0102:  GOTO   05F
....................     } 
0103:  INCF   24,F
0104:  GOTO   05A
....................     } 
0105:  INCF   25,F
0106:  GOTO   055
....................     } 
0107:  INCF   26,F
0108:  GOTO   050
....................     } 
0109:  INCF   27,F
010A:  GOTO   04B
....................     } 
010B:  INCF   28,F
010C:  GOTO   046
....................     } 
010D:  GOTO   045
....................    } 
....................  
.................... } 
010E:  SLEEP

Configuration Fuses:
   Word  1: 3F79   XT NOWDT NOPUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
