CCS PCM C Compiler, Version 5.042, 5967               19-Abr.-20 12:16

               Filename:   C:\Users\Casa\Desktop\PIC16F877A_PICC\PIC_I2C_LCD_PRUEBA\PIC_I2C_LCD_PRUEBA.lst

               ROM used:   1430 words (17%)
                           Largest free fragment is 2048
               RAM used:   19 (5%) at main() level
                           54 (15%) worst case
               Stack used: 7 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   50B
0003:  NOP
.................... #include <PIC_I2C_LCD_PRUEBA.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 5F,00
000D:  DATA CA,27
000E:  DATA D3,22
000F:  DATA DF,24
0010:  DATA 44,00
0011:  DATA 5F,00
0012:  DATA CA,27
0013:  DATA D3,22
0014:  DATA DF,24
0015:  DATA 44,00
*
01AD:  MOVF   0B,W
01AE:  MOVWF  2D
01AF:  BCF    0B.7
01B0:  BSF    03.5
01B1:  BSF    03.6
01B2:  BSF    0C.7
01B3:  BSF    0C.0
01B4:  NOP
01B5:  NOP
01B6:  BCF    03.5
01B7:  BCF    03.6
01B8:  BTFSC  2D.7
01B9:  BSF    0B.7
01BA:  BSF    03.6
01BB:  MOVF   0C,W
01BC:  ANDLW  7F
01BD:  BTFSC  03.2
01BE:  GOTO   201
01BF:  BCF    03.6
01C0:  MOVWF  2D
01C1:  BSF    03.6
01C2:  MOVF   0D,W
01C3:  BCF    03.6
01C4:  MOVWF  2E
01C5:  BSF    03.6
01C6:  MOVF   0F,W
01C7:  BCF    03.6
01C8:  MOVWF  2F
01C9:  MOVF   2D,W
01CA:  MOVWF  42
01CB:  CALL   188
01CC:  MOVF   2E,W
01CD:  BSF    03.6
01CE:  MOVWF  0D
01CF:  BCF    03.6
01D0:  MOVF   2F,W
01D1:  BSF    03.6
01D2:  MOVWF  0F
01D3:  BCF    03.6
01D4:  MOVF   0B,W
01D5:  MOVWF  30
01D6:  BCF    0B.7
01D7:  BSF    03.5
01D8:  BSF    03.6
01D9:  BSF    0C.7
01DA:  BSF    0C.0
01DB:  NOP
01DC:  NOP
01DD:  BCF    03.5
01DE:  BCF    03.6
01DF:  BTFSC  30.7
01E0:  BSF    0B.7
01E1:  BSF    03.6
01E2:  RLF    0C,W
01E3:  RLF    0E,W
01E4:  ANDLW  7F
01E5:  BTFSC  03.2
01E6:  GOTO   201
01E7:  BCF    03.6
01E8:  MOVWF  2D
01E9:  BSF    03.6
01EA:  MOVF   0D,W
01EB:  BCF    03.6
01EC:  MOVWF  2E
01ED:  BSF    03.6
01EE:  MOVF   0F,W
01EF:  BCF    03.6
01F0:  MOVWF  2F
01F1:  MOVF   2D,W
01F2:  MOVWF  42
01F3:  CALL   188
01F4:  MOVF   2E,W
01F5:  BSF    03.6
01F6:  MOVWF  0D
01F7:  BCF    03.6
01F8:  MOVF   2F,W
01F9:  BSF    03.6
01FA:  MOVWF  0F
01FB:  INCF   0D,F
01FC:  BTFSC  03.2
01FD:  INCF   0F,F
01FE:  BCF    03.6
01FF:  GOTO   1AD
0200:  BSF    03.6
0201:  BCF    03.6
0202:  RETURN
0203:  MOVF   42,W
0204:  BTFSC  03.2
0205:  GOTO   273
0206:  MOVWF  4A
0207:  MOVF   46,W
0208:  BTFSC  03.2
0209:  GOTO   273
020A:  ADDWF  4A,F
020B:  BTFSC  03.0
020C:  GOTO   214
020D:  MOVLW  7F
020E:  SUBWF  4A,F
020F:  BTFSS  03.0
0210:  GOTO   273
0211:  BTFSC  03.2
0212:  GOTO   273
0213:  GOTO   218
0214:  MOVLW  81
0215:  ADDWF  4A,F
0216:  BTFSC  03.0
0217:  GOTO   273
0218:  MOVF   4A,W
0219:  MOVWF  77
021A:  CLRF   78
021B:  CLRF   79
021C:  CLRF   7A
021D:  MOVF   43,W
021E:  MOVWF  4E
021F:  BSF    4E.7
0220:  MOVF   44,W
0221:  MOVWF  4D
0222:  MOVF   45,W
0223:  MOVWF  4C
0224:  MOVLW  18
0225:  MOVWF  4A
0226:  CLRF   4B
0227:  BTFSS  4C.0
0228:  GOTO   241
0229:  MOVF   49,W
022A:  ADDWF  7A,F
022B:  BTFSS  03.0
022C:  GOTO   233
022D:  INCF   79,F
022E:  BTFSS  03.2
022F:  GOTO   233
0230:  INCF   78,F
0231:  BTFSC  03.2
0232:  BSF    4B.7
0233:  MOVF   48,W
0234:  ADDWF  79,F
0235:  BTFSS  03.0
0236:  GOTO   23A
0237:  INCF   78,F
0238:  BTFSC  03.2
0239:  BSF    4B.7
023A:  MOVF   47,W
023B:  MOVWF  44
023C:  BSF    44.7
023D:  MOVF   44,W
023E:  ADDWF  78,F
023F:  BTFSC  03.0
0240:  BSF    4B.7
0241:  RLF    4B,F
0242:  RRF    78,F
0243:  RRF    79,F
0244:  RRF    7A,F
0245:  RRF    4E,F
0246:  RRF    4D,F
0247:  RRF    4C,F
0248:  BCF    03.0
0249:  DECFSZ 4A,F
024A:  GOTO   226
024B:  MOVLW  01
024C:  ADDWF  77,F
024D:  BTFSC  03.0
024E:  GOTO   273
024F:  BTFSC  78.7
0250:  GOTO   258
0251:  RLF    4E,F
0252:  RLF    7A,F
0253:  RLF    79,F
0254:  RLF    78,F
0255:  DECF   77,F
0256:  BTFSC  03.2
0257:  GOTO   273
0258:  BTFSS  4E.7
0259:  GOTO   269
025A:  INCF   7A,F
025B:  BTFSS  03.2
025C:  GOTO   269
025D:  INCF   79,F
025E:  BTFSS  03.2
025F:  GOTO   269
0260:  INCF   78,F
0261:  BTFSS  03.2
0262:  GOTO   269
0263:  RRF    78,F
0264:  RRF    79,F
0265:  RRF    7A,F
0266:  INCF   77,F
0267:  BTFSC  03.2
0268:  GOTO   273
0269:  MOVF   43,W
026A:  MOVWF  4B
026B:  MOVF   47,W
026C:  XORWF  4B,F
026D:  BTFSS  4B.7
026E:  GOTO   271
026F:  BSF    78.7
0270:  GOTO   277
0271:  BCF    78.7
0272:  GOTO   277
0273:  CLRF   77
0274:  CLRF   78
0275:  CLRF   79
0276:  CLRF   7A
0277:  RETURN
0278:  BTFSC  03.1
0279:  GOTO   27D
027A:  MOVLW  4A
027B:  MOVWF  04
027C:  BCF    03.7
027D:  CLRF   77
027E:  CLRF   78
027F:  CLRF   79
0280:  CLRF   7A
0281:  CLRF   4A
0282:  CLRF   4B
0283:  CLRF   4C
0284:  CLRF   4D
0285:  MOVF   49,W
0286:  IORWF  48,W
0287:  IORWF  47,W
0288:  IORWF  46,W
0289:  BTFSC  03.2
028A:  GOTO   2BB
028B:  MOVLW  20
028C:  MOVWF  4E
028D:  BCF    03.0
028E:  RLF    42,F
028F:  RLF    43,F
0290:  RLF    44,F
0291:  RLF    45,F
0292:  RLF    4A,F
0293:  RLF    4B,F
0294:  RLF    4C,F
0295:  RLF    4D,F
0296:  MOVF   49,W
0297:  SUBWF  4D,W
0298:  BTFSS  03.2
0299:  GOTO   2A4
029A:  MOVF   48,W
029B:  SUBWF  4C,W
029C:  BTFSS  03.2
029D:  GOTO   2A4
029E:  MOVF   47,W
029F:  SUBWF  4B,W
02A0:  BTFSS  03.2
02A1:  GOTO   2A4
02A2:  MOVF   46,W
02A3:  SUBWF  4A,W
02A4:  BTFSS  03.0
02A5:  GOTO   2B5
02A6:  MOVF   46,W
02A7:  SUBWF  4A,F
02A8:  MOVF   47,W
02A9:  BTFSS  03.0
02AA:  INCFSZ 47,W
02AB:  SUBWF  4B,F
02AC:  MOVF   48,W
02AD:  BTFSS  03.0
02AE:  INCFSZ 48,W
02AF:  SUBWF  4C,F
02B0:  MOVF   49,W
02B1:  BTFSS  03.0
02B2:  INCFSZ 49,W
02B3:  SUBWF  4D,F
02B4:  BSF    03.0
02B5:  RLF    77,F
02B6:  RLF    78,F
02B7:  RLF    79,F
02B8:  RLF    7A,F
02B9:  DECFSZ 4E,F
02BA:  GOTO   28D
02BB:  MOVF   4A,W
02BC:  MOVWF  00
02BD:  INCF   04,F
02BE:  MOVF   4B,W
02BF:  MOVWF  00
02C0:  INCF   04,F
02C1:  MOVF   4C,W
02C2:  MOVWF  00
02C3:  INCF   04,F
02C4:  MOVF   4D,W
02C5:  MOVWF  00
02C6:  RETURN
02C7:  MOVF   04,W
02C8:  MOVWF  3A
02C9:  MOVF   39,W
02CA:  MOVWF  3C
02CB:  BTFSC  03.2
02CC:  GOTO   2E6
02CD:  MOVF   38,W
02CE:  MOVWF  45
02CF:  MOVF   37,W
02D0:  MOVWF  44
02D1:  MOVF   36,W
02D2:  MOVWF  43
02D3:  MOVF   35,W
02D4:  MOVWF  42
02D5:  CLRF   49
02D6:  CLRF   48
02D7:  MOVLW  20
02D8:  MOVWF  47
02D9:  MOVLW  82
02DA:  MOVWF  46
02DB:  CALL   203
02DC:  MOVF   7A,W
02DD:  MOVWF  38
02DE:  MOVF   79,W
02DF:  MOVWF  37
02E0:  MOVF   78,W
02E1:  MOVWF  36
02E2:  MOVF   77,W
02E3:  MOVWF  35
02E4:  DECFSZ 3C,F
02E5:  GOTO   2CD
02E6:  MOVF   38,W
02E7:  MOVWF  45
02E8:  MOVF   37,W
02E9:  MOVWF  44
02EA:  MOVF   36,W
02EB:  MOVWF  43
02EC:  MOVF   35,W
02ED:  MOVWF  42
02EE:  MOVF   42,W
02EF:  SUBLW  B6
02F0:  MOVWF  42
02F1:  CLRF   7A
02F2:  MOVF   43,W
02F3:  MOVWF  46
02F4:  BSF    43.7
02F5:  BCF    03.0
02F6:  RRF    43,F
02F7:  RRF    44,F
02F8:  RRF    45,F
02F9:  RRF    7A,F
02FA:  RRF    79,F
02FB:  RRF    78,F
02FC:  RRF    77,F
02FD:  DECFSZ 42,F
02FE:  GOTO   2F5
02FF:  BTFSS  46.7
0300:  GOTO   30C
0301:  COMF   77,F
0302:  COMF   78,F
0303:  COMF   79,F
0304:  COMF   7A,F
0305:  INCF   77,F
0306:  BTFSC  03.2
0307:  INCF   78,F
0308:  BTFSC  03.2
0309:  INCF   79,F
030A:  BTFSC  03.2
030B:  INCF   7A,F
030C:  MOVF   7A,W
030D:  MOVWF  38
030E:  MOVF   79,W
030F:  MOVWF  37
0310:  MOVF   78,W
0311:  MOVWF  36
0312:  MOVF   77,W
0313:  MOVWF  35
0314:  BTFSS  38.7
0315:  GOTO   323
0316:  DECF   3A,F
0317:  BSF    3A.5
0318:  COMF   35,F
0319:  COMF   36,F
031A:  COMF   37,F
031B:  COMF   38,F
031C:  INCF   35,F
031D:  BTFSC  03.2
031E:  INCF   36,F
031F:  BTFSC  03.2
0320:  INCF   37,F
0321:  BTFSC  03.2
0322:  INCF   38,F
0323:  MOVLW  3B
0324:  MOVWF  41
0325:  MOVLW  9A
0326:  MOVWF  40
0327:  MOVLW  CA
0328:  MOVWF  3F
0329:  CLRF   3E
032A:  MOVLW  0A
032B:  MOVWF  3C
032C:  MOVF   39,W
032D:  BTFSC  03.2
032E:  INCF   3A,F
032F:  BSF    03.1
0330:  MOVLW  35
0331:  MOVWF  04
0332:  BCF    03.7
0333:  MOVF   38,W
0334:  MOVWF  45
0335:  MOVF   37,W
0336:  MOVWF  44
0337:  MOVF   36,W
0338:  MOVWF  43
0339:  MOVF   35,W
033A:  MOVWF  42
033B:  MOVF   41,W
033C:  MOVWF  49
033D:  MOVF   40,W
033E:  MOVWF  48
033F:  MOVF   3F,W
0340:  MOVWF  47
0341:  MOVF   3E,W
0342:  MOVWF  46
0343:  CALL   278
0344:  MOVF   78,W
0345:  MOVF   77,F
0346:  BTFSS  03.2
0347:  GOTO   35B
0348:  INCF   39,W
0349:  SUBWF  3C,W
034A:  BTFSC  03.2
034B:  GOTO   35B
034C:  MOVF   3A,W
034D:  BTFSC  03.2
034E:  GOTO   35D
034F:  ANDLW  0F
0350:  SUBWF  3C,W
0351:  BTFSC  03.2
0352:  GOTO   355
0353:  BTFSC  03.0
0354:  GOTO   38D
0355:  BTFSC  3A.7
0356:  GOTO   38D
0357:  BTFSC  3A.6
0358:  GOTO   35D
0359:  MOVLW  20
035A:  GOTO   389
035B:  MOVLW  20
035C:  ANDWF  3A,F
035D:  BTFSS  3A.5
035E:  GOTO   36B
035F:  BCF    3A.5
0360:  MOVF   39,W
0361:  BTFSS  03.2
0362:  DECF   3A,F
0363:  MOVF   77,W
0364:  MOVWF  3A
0365:  MOVLW  2D
0366:  MOVWF  42
0367:  CALL   188
0368:  MOVF   3A,W
0369:  MOVWF  77
036A:  CLRF   3A
036B:  MOVF   39,W
036C:  SUBWF  3C,W
036D:  BTFSS  03.2
036E:  GOTO   379
036F:  MOVF   77,W
0370:  MOVWF  3A
0371:  MOVLW  2E
0372:  MOVWF  42
0373:  CALL   188
0374:  MOVF   3A,W
0375:  MOVWF  77
0376:  MOVLW  20
0377:  ANDWF  3A,F
0378:  MOVLW  00
0379:  MOVLW  30
037A:  BTFSS  3A.5
037B:  GOTO   389
037C:  BCF    3A.5
037D:  MOVF   39,W
037E:  BTFSS  03.2
037F:  DECF   3A,F
0380:  MOVF   77,W
0381:  MOVWF  3A
0382:  MOVLW  2D
0383:  MOVWF  42
0384:  CALL   188
0385:  MOVF   3A,W
0386:  MOVWF  77
0387:  CLRF   3A
0388:  MOVLW  30
0389:  ADDWF  77,F
038A:  MOVF   77,W
038B:  MOVWF  42
038C:  CALL   188
038D:  BCF    03.1
038E:  MOVF   41,W
038F:  MOVWF  45
0390:  MOVF   40,W
0391:  MOVWF  44
0392:  MOVF   3F,W
0393:  MOVWF  43
0394:  MOVF   3E,W
0395:  MOVWF  42
0396:  CLRF   49
0397:  CLRF   48
0398:  CLRF   47
0399:  MOVLW  0A
039A:  MOVWF  46
039B:  CALL   278
039C:  MOVF   7A,W
039D:  MOVWF  41
039E:  MOVF   79,W
039F:  MOVWF  40
03A0:  MOVF   78,W
03A1:  MOVWF  3F
03A2:  MOVF   77,W
03A3:  MOVWF  3E
03A4:  DECFSZ 3C,F
03A5:  GOTO   32F
03A6:  RETURN
*
03B8:  MOVLW  8E
03B9:  MOVWF  77
03BA:  MOVF   36,W
03BB:  MOVWF  78
03BC:  MOVF   35,W
03BD:  MOVWF  79
03BE:  CLRF   7A
03BF:  MOVF   78,F
03C0:  BTFSS  03.2
03C1:  GOTO   3CC
03C2:  MOVF   79,W
03C3:  MOVWF  78
03C4:  CLRF   79
03C5:  MOVLW  08
03C6:  SUBWF  77,F
03C7:  MOVF   78,F
03C8:  BTFSS  03.2
03C9:  GOTO   3CC
03CA:  CLRF   77
03CB:  GOTO   3D4
03CC:  BCF    03.0
03CD:  BTFSC  78.7
03CE:  GOTO   3D3
03CF:  RLF    79,F
03D0:  RLF    78,F
03D1:  DECF   77,F
03D2:  GOTO   3CC
03D3:  BCF    78.7
*
0404:  MOVF   39,W
0405:  BTFSC  03.2
0406:  GOTO   4C9
0407:  MOVWF  45
0408:  MOVF   3D,W
0409:  BTFSC  03.2
040A:  GOTO   4C9
040B:  SUBWF  45,F
040C:  BTFSS  03.0
040D:  GOTO   413
040E:  MOVLW  7F
040F:  ADDWF  45,F
0410:  BTFSC  03.0
0411:  GOTO   4C9
0412:  GOTO   419
0413:  MOVLW  81
0414:  SUBWF  45,F
0415:  BTFSS  03.0
0416:  GOTO   4C9
0417:  BTFSC  03.2
0418:  GOTO   4C9
0419:  MOVF   45,W
041A:  MOVWF  77
041B:  CLRF   78
041C:  CLRF   79
041D:  CLRF   7A
041E:  CLRF   44
041F:  MOVF   3A,W
0420:  MOVWF  43
0421:  BSF    43.7
0422:  MOVF   3B,W
0423:  MOVWF  42
0424:  MOVF   3C,W
0425:  MOVWF  41
0426:  MOVLW  19
0427:  MOVWF  45
0428:  MOVF   40,W
0429:  SUBWF  41,F
042A:  BTFSC  03.0
042B:  GOTO   43C
042C:  MOVLW  01
042D:  SUBWF  42,F
042E:  BTFSC  03.0
042F:  GOTO   43C
0430:  SUBWF  43,F
0431:  BTFSC  03.0
0432:  GOTO   43C
0433:  SUBWF  44,F
0434:  BTFSC  03.0
0435:  GOTO   43C
0436:  INCF   44,F
0437:  INCF   43,F
0438:  INCF   42,F
0439:  MOVF   40,W
043A:  ADDWF  41,F
043B:  GOTO   46E
043C:  MOVF   3F,W
043D:  SUBWF  42,F
043E:  BTFSC  03.0
043F:  GOTO   457
0440:  MOVLW  01
0441:  SUBWF  43,F
0442:  BTFSC  03.0
0443:  GOTO   457
0444:  SUBWF  44,F
0445:  BTFSC  03.0
0446:  GOTO   457
0447:  INCF   44,F
0448:  INCF   43,F
0449:  MOVF   3F,W
044A:  ADDWF  42,F
044B:  MOVF   40,W
044C:  ADDWF  41,F
044D:  BTFSS  03.0
044E:  GOTO   46E
044F:  INCF   42,F
0450:  BTFSS  03.2
0451:  GOTO   46E
0452:  INCF   43,F
0453:  BTFSS  03.2
0454:  GOTO   46E
0455:  INCF   44,F
0456:  GOTO   46E
0457:  MOVF   3E,W
0458:  IORLW  80
0459:  SUBWF  43,F
045A:  BTFSC  03.0
045B:  GOTO   46D
045C:  MOVLW  01
045D:  SUBWF  44,F
045E:  BTFSC  03.0
045F:  GOTO   46D
0460:  INCF   44,F
0461:  MOVF   3E,W
0462:  IORLW  80
0463:  ADDWF  43,F
0464:  MOVF   3F,W
0465:  ADDWF  42,F
0466:  BTFSS  03.0
0467:  GOTO   44B
0468:  INCF   43,F
0469:  BTFSS  03.2
046A:  GOTO   44B
046B:  INCF   44,F
046C:  GOTO   44B
046D:  BSF    7A.0
046E:  DECFSZ 45,F
046F:  GOTO   471
0470:  GOTO   47C
0471:  BCF    03.0
0472:  RLF    41,F
0473:  RLF    42,F
0474:  RLF    43,F
0475:  RLF    44,F
0476:  BCF    03.0
0477:  RLF    7A,F
0478:  RLF    79,F
0479:  RLF    78,F
047A:  RLF    46,F
047B:  GOTO   428
047C:  BTFSS  46.0
047D:  GOTO   484
047E:  BCF    03.0
047F:  RRF    78,F
0480:  RRF    79,F
0481:  RRF    7A,F
0482:  RRF    46,F
0483:  GOTO   487
0484:  DECF   77,F
0485:  BTFSC  03.2
0486:  GOTO   4C9
0487:  BTFSC  46.7
0488:  GOTO   4B0
0489:  BCF    03.0
048A:  RLF    41,F
048B:  RLF    42,F
048C:  RLF    43,F
048D:  RLF    44,F
048E:  MOVF   40,W
048F:  SUBWF  41,F
0490:  BTFSC  03.0
0491:  GOTO   49C
0492:  MOVLW  01
0493:  SUBWF  42,F
0494:  BTFSC  03.0
0495:  GOTO   49C
0496:  SUBWF  43,F
0497:  BTFSC  03.0
0498:  GOTO   49C
0499:  SUBWF  44,F
049A:  BTFSS  03.0
049B:  GOTO   4BF
049C:  MOVF   3F,W
049D:  SUBWF  42,F
049E:  BTFSC  03.0
049F:  GOTO   4A7
04A0:  MOVLW  01
04A1:  SUBWF  43,F
04A2:  BTFSC  03.0
04A3:  GOTO   4A7
04A4:  SUBWF  44,F
04A5:  BTFSS  03.0
04A6:  GOTO   4BF
04A7:  MOVF   3E,W
04A8:  IORLW  80
04A9:  SUBWF  43,F
04AA:  BTFSC  03.0
04AB:  GOTO   4B0
04AC:  MOVLW  01
04AD:  SUBWF  44,F
04AE:  BTFSS  03.0
04AF:  GOTO   4BF
04B0:  INCF   7A,F
04B1:  BTFSS  03.2
04B2:  GOTO   4BF
04B3:  INCF   79,F
04B4:  BTFSS  03.2
04B5:  GOTO   4BF
04B6:  INCF   78,F
04B7:  BTFSS  03.2
04B8:  GOTO   4BF
04B9:  INCF   77,F
04BA:  BTFSC  03.2
04BB:  GOTO   4C9
04BC:  RRF    78,F
04BD:  RRF    79,F
04BE:  RRF    7A,F
04BF:  MOVF   3A,W
04C0:  MOVWF  45
04C1:  MOVF   3E,W
04C2:  XORWF  45,F
04C3:  BTFSS  45.7
04C4:  GOTO   4C7
04C5:  BSF    78.7
04C6:  GOTO   4CD
04C7:  BCF    78.7
04C8:  GOTO   4CD
04C9:  CLRF   77
04CA:  CLRF   78
04CB:  CLRF   79
04CC:  CLRF   7A
....................  
.................... #list 
....................  
.................... #FUSES INTRC_IO,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP 
.................... #device ADC=10 
.................... #use delay(crystal=8000000) 
*
0019:  MOVLW  43
001A:  MOVWF  04
001B:  BCF    03.7
001C:  MOVF   00,W
001D:  BTFSC  03.2
001E:  GOTO   02C
001F:  MOVLW  02
0020:  MOVWF  78
0021:  CLRF   77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 78,F
0025:  GOTO   021
0026:  MOVLW  97
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  DECFSZ 00,F
002B:  GOTO   01F
002C:  RETURN
....................  
....................  
.................... #byte porta = 0xf80 // Identificador para el puerto A.  
.................... #byte portb = 0xf81 // Identificador para el puerto B.  
.................... #byte portc = 0xf82 // Identificador para el puerto C.  
.................... #byte portd = 0xf83 // Identificador para el puerto D.  
.................... #byte porte = 0xf84 // Identificador para el puerto E. 
.................... #use i2c(Master,Fast=100000, sda=PIN_D1, scl=PIN_D0,force_sw)  
002D:  MOVLW  08
002E:  MOVWF  78
002F:  NOP
0030:  BCF    08.0
0031:  BSF    03.5
0032:  BCF    08.0
0033:  NOP
0034:  BCF    03.5
0035:  RLF    50,F
0036:  BCF    08.1
0037:  BTFSS  03.0
0038:  GOTO   03C
0039:  BSF    03.5
003A:  BSF    08.1
003B:  BCF    03.5
003C:  BTFSC  03.0
003D:  GOTO   041
003E:  BSF    03.5
003F:  BCF    08.1
0040:  BCF    03.5
0041:  BSF    03.5
0042:  BSF    08.0
0043:  BCF    03.5
0044:  BTFSS  08.0
0045:  GOTO   044
0046:  DECFSZ 78,F
0047:  GOTO   02F
0048:  NOP
0049:  BCF    08.0
004A:  BSF    03.5
004B:  BCF    08.0
004C:  NOP
004D:  BSF    08.1
004E:  NOP
004F:  NOP
0050:  BSF    08.0
0051:  BCF    03.5
0052:  BTFSS  08.0
0053:  GOTO   052
0054:  CLRF   78
0055:  NOP
0056:  BTFSC  08.1
0057:  BSF    78.0
0058:  BCF    08.0
0059:  BSF    03.5
005A:  BCF    08.0
005B:  BCF    03.5
005C:  BCF    08.1
005D:  BSF    03.5
005E:  BCF    08.1
005F:  BCF    03.5
0060:  RETURN
.................... #include <i2c_Flex_LCD.c>   
.................... //-----------------------------------------------------------------------------  
.................... // Title:         i2c_Flex_LCD  
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns  
.................... //                using PCF8574T interface board with I2C protocol.  
.................... // Date:          Nov-2013  
.................... // Ver.Rev.:      1.1  
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of  
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // lcd_init() Must be called before any other function.  
.................... //  
.................... // lcd_putc(c) Will display c on the next position of the LCD.  
.................... //   
.................... //     \f Clear LCD display  
.................... //     \n Set write position on next lcd line  
.................... //     \b LCD backspace  
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)  
.................... //  
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED  
.................... //  
.................... //-----------------------------------------------------------------------------  
.................... // LCD pins D0-D3 are not used.  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from  
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C.  
.................... //              The tests of these routines have been programmed using the IC  
.................... //              Phillips PCF8574T. I've used 4 bits mode programming.  
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T.  
.................... //              RW Pin is not being used.  
.................... //  
.................... // As defined in the following structure the pin connection is as follows:  
.................... //  
.................... //  PCF8574P     LCD  
.................... //  ========     ======  
.................... //     P0        RS  
.................... //     P1        RW    (Not used!)  
.................... //     P2        Enable   
.................... //     P3        Led Backlight  
.................... //     P4        D4  
.................... //     P5        D5  
.................... //     P6        D6  
.................... //     P7        D7  
.................... //  
.................... //  The SCL and SDA pins should be pull-up resistor as shown below:  
.................... //  
.................... //             +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SDA pin   
.................... //(SDA)                       
.................... //              +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SCL pin   
.................... //(SCL)  
.................... //  
.................... //To PIC                    To i2c slave  
.................... //Vss pin ----------------- Vss or ground pin   
.................... //                |  
.................... //              -----  
.................... //               ---  Ground  
.................... //                -   
.................... //   
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS"  
.................... //-----------------------------------------------------------------------------  
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module  
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4  
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20    
....................  
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS  
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW  
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN  
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED  
....................  
.................... #define addr_row_one          0x00        //LCD RAM address for row 1  
.................... #define addr_row_two          0x40        //LCD RAM address for row 2  
.................... #define addr_row_three        0x14        //LCD RAM address for row 3  
.................... #define addr_row_four         0x54        //LCD RAM address for row 4  
....................  
.................... #define ON                    1  
.................... #define OFF                   0  
.................... #define NOT                   ~  
.................... #define data_shifted          data<<4  
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT;  
....................  
.................... void lcd_backlight_led(byte bl)  
.................... {   
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF;  
*
0147:  MOVF   2D,F
0148:  BTFSC  03.2
0149:  GOTO   14D
014A:  MOVLW  08
014B:  MOVWF  24
014C:  GOTO   14E
014D:  CLRF   24
014E:  BCF    0A.3
014F:  BCF    0A.4
0150:  GOTO   548 (RETURN)
.................... }  
....................  
.................... void i2c_send_nibble(byte data, byte type)  
.................... {     
....................    switch (type)  
*
0061:  MOVF   4E,W
0062:  XORLW  00
0063:  BTFSC  03.2
0064:  GOTO   069
0065:  XORLW  01
0066:  BTFSC  03.2
0067:  GOTO   08A
0068:  GOTO   0AC
....................    {       
....................       case 0 :       
....................       i2c_write(data_shifted | BACKLIGHT_LED);  
0069:  SWAPF  4D,W
006A:  MOVWF  77
006B:  MOVLW  F0
006C:  ANDWF  77,F
006D:  MOVF   77,W
006E:  IORWF  24,W
006F:  MOVWF  4F
0070:  MOVWF  50
0071:  CALL   02D
....................       delay_cycles(1);  
0072:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED );  
0073:  SWAPF  4D,W
0074:  MOVWF  77
0075:  MOVLW  F0
0076:  ANDWF  77,F
0077:  MOVF   77,W
0078:  IORLW  04
0079:  IORWF  24,W
007A:  MOVWF  4F
007B:  MOVWF  50
007C:  CALL   02D
....................       delay_us(2);  
007D:  GOTO   07E
007E:  GOTO   07F
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED);  
007F:  SWAPF  4D,W
0080:  MOVWF  77
0081:  MOVLW  F0
0082:  ANDWF  77,F
0083:  MOVF   77,W
0084:  ANDLW  FB
0085:  IORWF  24,W
0086:  MOVWF  4F
0087:  MOVWF  50
0088:  CALL   02D
....................       break;  
0089:  GOTO   0AC
....................        
....................       case 1 :  
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
008A:  SWAPF  4D,W
008B:  MOVWF  77
008C:  MOVLW  F0
008D:  ANDWF  77,F
008E:  MOVF   77,W
008F:  IORLW  01
0090:  IORWF  24,W
0091:  MOVWF  4F
0092:  MOVWF  50
0093:  CALL   02D
....................       delay_cycles(1);  
0094:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED );  
0095:  SWAPF  4D,W
0096:  MOVWF  77
0097:  MOVLW  F0
0098:  ANDWF  77,F
0099:  MOVF   77,W
009A:  IORLW  01
009B:  IORLW  04
009C:  IORWF  24,W
009D:  MOVWF  4F
009E:  MOVWF  50
009F:  CALL   02D
....................       delay_us(2);  
00A0:  GOTO   0A1
00A1:  GOTO   0A2
....................       i2c_write(data_shifted & RS | BACKLIGHT_LED);  
00A2:  SWAPF  4D,W
00A3:  MOVWF  77
00A4:  MOVLW  F0
00A5:  ANDWF  77,F
00A6:  MOVF   77,W
00A7:  ANDLW  01
00A8:  IORWF  24,W
00A9:  MOVWF  4F
00AA:  MOVWF  50
00AB:  CALL   02D
....................       break;  
....................    }  
00AC:  RETURN
.................... }  
....................      
.................... void lcd_send_byte(byte data, byte type)  
....................    {  
....................         i2c_start();  
00AD:  BSF    03.5
00AE:  BSF    08.1
00AF:  NOP
00B0:  BSF    08.0
00B1:  NOP
00B2:  BCF    03.5
00B3:  BCF    08.1
00B4:  BSF    03.5
00B5:  BCF    08.1
00B6:  NOP
00B7:  BCF    03.5
00B8:  BCF    08.0
00B9:  BSF    03.5
00BA:  BCF    08.0
....................         i2c_write(LCD_ADDR);  
00BB:  BCF    03.5
00BC:  MOVF   20,W
00BD:  MOVWF  50
00BE:  CALL   02D
....................         i2c_send_nibble(data >> 4 , type);  
00BF:  SWAPF  4A,W
00C0:  MOVWF  4C
00C1:  MOVLW  0F
00C2:  ANDWF  4C,F
00C3:  MOVF   4C,W
00C4:  MOVWF  4D
00C5:  MOVF   4B,W
00C6:  MOVWF  4E
00C7:  CALL   061
....................         i2c_send_nibble(data & 0xf , type);  
00C8:  MOVF   4A,W
00C9:  ANDLW  0F
00CA:  MOVWF  4C
00CB:  MOVWF  4D
00CC:  MOVF   4B,W
00CD:  MOVWF  4E
00CE:  CALL   061
....................         i2c_stop();         
00CF:  BSF    03.5
00D0:  BCF    08.1
00D1:  NOP
00D2:  BSF    08.0
00D3:  BCF    03.5
00D4:  BTFSS  08.0
00D5:  GOTO   0D4
00D6:  NOP
00D7:  GOTO   0D8
00D8:  NOP
00D9:  BSF    03.5
00DA:  BSF    08.1
00DB:  NOP
00DC:  BCF    03.5
00DD:  RETURN
....................    }  
....................  
.................... void lcd_clear()  
.................... {   
....................         lcd_send_byte(0x01,0);  
00DE:  MOVLW  01
00DF:  MOVWF  4A
00E0:  CLRF   4B
00E1:  CALL   0AD
....................         delay_ms(2);  
00E2:  MOVLW  02
00E3:  MOVWF  43
00E4:  CALL   019
....................         new_row_request=1;  
00E5:  MOVLW  01
00E6:  MOVWF  23
00E7:  RETURN
.................... }  
....................  
.................... void lcd_init(byte ADDR, byte col, byte row)  
.................... {  
....................    byte i; 
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines  
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up. 
....................     
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module  
00E8:  MOVF   2D,W
00E9:  MOVWF  20
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4  
00EA:  MOVF   2F,W
00EB:  MOVWF  21
....................    lcd_total_columns= col ; 
00EC:  MOVF   2E,W
00ED:  MOVWF  22
....................    disable_interrupts(GLOBAL);  
00EE:  BCF    0B.6
00EF:  BCF    0B.7
00F0:  BTFSC  0B.7
00F1:  GOTO   0EF
....................    delay_ms(50); //LCD power up delay  
00F2:  MOVLW  32
00F3:  MOVWF  43
00F4:  CALL   019
....................      
....................    i2c_start();  
00F5:  BSF    03.5
00F6:  BSF    08.1
00F7:  NOP
00F8:  BSF    08.0
00F9:  NOP
00FA:  BCF    03.5
00FB:  BCF    08.1
00FC:  BSF    03.5
00FD:  BCF    08.1
00FE:  NOP
00FF:  BCF    03.5
0100:  BCF    08.0
0101:  BSF    03.5
0102:  BCF    08.0
....................    i2c_write(LCD_ADDR);  
0103:  BCF    03.5
0104:  MOVF   20,W
0105:  MOVWF  50
0106:  CALL   02D
....................       i2c_send_nibble(0x00,0);  
0107:  CLRF   4D
0108:  CLRF   4E
0109:  CALL   061
....................       delay_ms(15);  
010A:  MOVLW  0F
010B:  MOVWF  43
010C:  CALL   019
....................      
....................    for (i=1;i<=3;++i)     
010D:  MOVLW  01
010E:  MOVWF  30
010F:  MOVF   30,W
0110:  SUBLW  03
0111:  BTFSS  03.0
0112:  GOTO   11C
....................    {  
....................       i2c_send_nibble(0x03,0);  
0113:  MOVLW  03
0114:  MOVWF  4D
0115:  CLRF   4E
0116:  CALL   061
....................       delay_ms(5);  
0117:  MOVLW  05
0118:  MOVWF  43
0119:  CALL   019
011A:  INCF   30,F
011B:  GOTO   10F
....................    }     
....................       i2c_send_nibble(0x02,0);  
011C:  MOVLW  02
011D:  MOVWF  4D
011E:  CLRF   4E
011F:  CALL   061
....................       delay_ms(5);  
0120:  MOVLW  05
0121:  MOVWF  43
0122:  CALL   019
....................    i2c_stop();  
0123:  BSF    03.5
0124:  BCF    08.1
0125:  NOP
0126:  BSF    08.0
0127:  BCF    03.5
0128:  BTFSS  08.0
0129:  GOTO   128
012A:  NOP
012B:  GOTO   12C
012C:  NOP
012D:  BSF    03.5
012E:  BSF    08.1
012F:  NOP
....................      
....................    for (i=0;i<=3;++i) {  
0130:  BCF    03.5
0131:  CLRF   30
0132:  MOVF   30,W
0133:  SUBLW  03
0134:  BTFSS  03.0
0135:  GOTO   141
....................    lcd_send_byte(LCD_INIT_STRING[i],0);  
0136:  MOVF   30,W
0137:  CALL   004
0138:  MOVWF  31
0139:  MOVWF  4A
013A:  CLRF   4B
013B:  CALL   0AD
....................    delay_ms(5);  
013C:  MOVLW  05
013D:  MOVWF  43
013E:  CALL   019
013F:  INCF   30,F
0140:  GOTO   132
....................    }  
....................    lcd_clear();  //Clear Display  
0141:  CALL   0DE
....................    enable_interrupts(GLOBAL);  
0142:  MOVLW  C0
0143:  IORWF  0B,F
0144:  BCF    0A.3
0145:  BCF    0A.4
0146:  GOTO   545 (RETURN)
.................... }  
....................  
.................... void lcd_gotoxy( byte x, byte y)  
.................... {  
.................... byte row,column,row_addr,lcd_address;  
.................... static char data;  
*
0524:  BCF    03.6
0525:  CLRF   25
....................  
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y;  
*
0151:  MOVF   44,W
0152:  SUBWF  21,W
0153:  BTFSC  03.0
0154:  GOTO   158
0155:  MOVF   21,W
0156:  MOVWF  45
0157:  GOTO   15A
0158:  MOVF   44,W
0159:  MOVWF  45
....................    
....................    switch(row)  
015A:  MOVF   45,W
015B:  XORLW  01
015C:  BTFSC  03.2
015D:  GOTO   168
015E:  XORLW  03
015F:  BTFSC  03.2
0160:  GOTO   16A
0161:  XORLW  01
0162:  BTFSC  03.2
0163:  GOTO   16D
0164:  XORLW  07
0165:  BTFSC  03.2
0166:  GOTO   170
0167:  GOTO   173
....................    {  
....................       case 1:  row_addr=addr_row_one;     break;  
0168:  CLRF   47
0169:  GOTO   174
....................       case 2:  row_addr=addr_row_two;     break;  
016A:  MOVLW  40
016B:  MOVWF  47
016C:  GOTO   174
....................       case 3:  row_addr=addr_row_three;   break;  
016D:  MOVLW  14
016E:  MOVWF  47
016F:  GOTO   174
....................       case 4:  row_addr=addr_row_four;    break;  
0170:  MOVLW  54
0171:  MOVWF  47
0172:  GOTO   174
....................       default: row_addr=addr_row_one;     break;   
0173:  CLRF   47
....................    }   
....................      
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;   
0174:  MOVF   43,W
0175:  SUBWF  22,W
0176:  BTFSC  03.0
0177:  GOTO   17B
0178:  MOVF   22,W
0179:  MOVWF  46
017A:  GOTO   17D
017B:  MOVF   43,W
017C:  MOVWF  46
....................    lcd_address=(row_addr+(column-1));  
017D:  MOVLW  01
017E:  SUBWF  46,W
017F:  ADDWF  47,W
0180:  MOVWF  48
....................    lcd_send_byte(0x80|lcd_address,0);  
0181:  MOVF   48,W
0182:  IORLW  80
0183:  MOVWF  49
0184:  MOVWF  4A
0185:  CLRF   4B
0186:  CALL   0AD
0187:  RETURN
.................... }  
....................  
.................... //Display the character on LCD screen.  
.................... void LCD_PUTC(char in_data)  
.................... {     
....................   switch(in_data)  
0188:  MOVF   42,W
0189:  XORLW  0C
018A:  BTFSC  03.2
018B:  GOTO   193
018C:  XORLW  06
018D:  BTFSC  03.2
018E:  GOTO   195
018F:  XORLW  02
0190:  BTFSC  03.2
0191:  GOTO   1A2
0192:  GOTO   1A7
....................    {   
....................      case '\f': lcd_clear();                       break;                 
0193:  CALL   0DE
0194:  GOTO   1AC
....................        
....................      case '\n':  
....................      new_row_request++;  
0195:  INCF   23,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1;  
0196:  MOVF   23,W
0197:  SUBWF  21,W
0198:  BTFSC  03.0
0199:  GOTO   19C
019A:  MOVLW  01
019B:  MOVWF  23
....................      lcd_gotoxy(1, new_row_request);  
019C:  MOVLW  01
019D:  MOVWF  43
019E:  MOVF   23,W
019F:  MOVWF  44
01A0:  CALL   151
....................      break;  
01A1:  GOTO   1AC
....................                    
....................      case '\b': lcd_send_byte(0x10,0);             break;  
01A2:  MOVLW  10
01A3:  MOVWF  4A
01A4:  CLRF   4B
01A5:  CALL   0AD
01A6:  GOTO   1AC
....................          
....................      default: lcd_send_byte(in_data,1);            break;       
01A7:  MOVF   42,W
01A8:  MOVWF  4A
01A9:  MOVLW  01
01AA:  MOVWF  4B
01AB:  CALL   0AD
....................        
....................    }  
01AC:  RETURN
.................... }  
....................  
.................... #include <Kbd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
0016:  BCF    0A.3
0017:  BCF    0A.4
0018:  GOTO   52B (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
0526:  CLRF   26
....................    static int1 kbd_down; 
0527:  BCF    27.0
....................    static char last_key; 
0528:  CLRF   28
....................    static BYTE col; 
0529:  CLRF   29
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
....................        switch (col) { 
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
....................                     kbd=~COL0&ALL_PINS; 
....................                     break; 
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
....................                     kbd=~COL1&ALL_PINS; 
....................                     break; 
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
....................                     kbd=~COL2&ALL_PINS; 
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
....................            kbd_down=FALSE; 
....................            kchar=last_key; 
....................            last_key='\0'; 
....................          } 
....................        } else { 
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
....................              if((kbd & ROW0)==0) 
....................                row=0; 
....................              else if((kbd & ROW1)==0) 
....................                row=1; 
....................              else if((kbd & ROW2)==0) 
....................                row=2; 
....................              else if((kbd & ROW3)==0) 
....................                row=3; 
....................              last_key =KEYS[row][col]; 
....................              kbd_down = TRUE; 
....................           } else { 
....................              ++col; 
....................              if(col==3) 
....................                col=0; 
....................           } 
....................        } 
....................       kbd_call_count=0; 
....................    } 
....................   set_tris_kbd(ALL_PINS); 
....................   return(kchar); 
.................... } 
....................  
.................... INT X; 
.................... VOID LEER_A0() 
.................... { 
.................... float q; 
.................... float p; 
.................... set_adc_channel(0); 
*
03A7:  MOVLW  00
03A8:  MOVWF  78
03A9:  MOVF   1F,W
03AA:  ANDLW  C3
03AB:  IORWF  78,W
03AC:  MOVWF  1F
.................... q=read_adc(); 
03AD:  BSF    1F.1
03AE:  BTFSC  1F.1
03AF:  GOTO   3AE
03B0:  MOVF   1E,W
03B1:  MOVWF  7A
03B2:  BSF    03.5
03B3:  MOVF   1E,W
03B4:  BCF    03.5
03B5:  MOVWF  35
03B6:  MOVF   7A,W
03B7:  MOVWF  36
*
03D4:  MOVF   7A,W
03D5:  MOVWF  30
03D6:  MOVF   79,W
03D7:  MOVWF  2F
03D8:  MOVF   78,W
03D9:  MOVWF  2E
03DA:  MOVF   77,W
03DB:  MOVWF  2D
.................... p=(4.9*q)/1023; 
03DC:  MOVLW  CD
03DD:  MOVWF  45
03DE:  MOVLW  CC
03DF:  MOVWF  44
03E0:  MOVLW  1C
03E1:  MOVWF  43
03E2:  MOVLW  81
03E3:  MOVWF  42
03E4:  MOVF   30,W
03E5:  MOVWF  49
03E6:  MOVF   2F,W
03E7:  MOVWF  48
03E8:  MOVF   2E,W
03E9:  MOVWF  47
03EA:  MOVF   2D,W
03EB:  MOVWF  46
03EC:  CALL   203
03ED:  MOVF   7A,W
03EE:  MOVWF  38
03EF:  MOVF   79,W
03F0:  MOVWF  37
03F1:  MOVF   78,W
03F2:  MOVWF  36
03F3:  MOVF   77,W
03F4:  MOVWF  35
03F5:  MOVF   38,W
03F6:  MOVWF  3C
03F7:  MOVF   37,W
03F8:  MOVWF  3B
03F9:  MOVF   36,W
03FA:  MOVWF  3A
03FB:  MOVF   35,W
03FC:  MOVWF  39
03FD:  CLRF   40
03FE:  MOVLW  C0
03FF:  MOVWF  3F
0400:  MOVLW  7F
0401:  MOVWF  3E
0402:  MOVLW  88
0403:  MOVWF  3D
*
04CD:  MOVF   7A,W
04CE:  MOVWF  34
04CF:  MOVF   79,W
04D0:  MOVWF  33
04D1:  MOVF   78,W
04D2:  MOVWF  32
04D3:  MOVF   77,W
04D4:  MOVWF  31
.................... delay_ms(5); 
04D5:  MOVLW  05
04D6:  MOVWF  43
04D7:  CALL   019
.................... LCD_GOTOXY(1,1); 
04D8:  MOVLW  01
04D9:  MOVWF  43
04DA:  MOVWF  44
04DB:  CALL   151
.................... PRINTF(LCD_PUTC,"A0:%4.1f",q); 
04DC:  MOVLW  41
04DD:  MOVWF  42
04DE:  CALL   188
04DF:  MOVLW  30
04E0:  MOVWF  42
04E1:  CALL   188
04E2:  MOVLW  3A
04E3:  MOVWF  42
04E4:  CALL   188
04E5:  MOVLW  03
04E6:  MOVWF  04
04E7:  MOVF   30,W
04E8:  MOVWF  38
04E9:  MOVF   2F,W
04EA:  MOVWF  37
04EB:  MOVF   2E,W
04EC:  MOVWF  36
04ED:  MOVF   2D,W
04EE:  MOVWF  35
04EF:  MOVLW  01
04F0:  MOVWF  39
04F1:  CALL   2C7
.................... LCD_GOTOXY(11,1); 
04F2:  MOVLW  0B
04F3:  MOVWF  43
04F4:  MOVLW  01
04F5:  MOVWF  44
04F6:  CALL   151
.................... PRINTF(LCD_PUTC,"V:%4.2f",p); 
04F7:  MOVLW  56
04F8:  MOVWF  42
04F9:  CALL   188
04FA:  MOVLW  3A
04FB:  MOVWF  42
04FC:  CALL   188
04FD:  MOVLW  03
04FE:  MOVWF  04
04FF:  MOVF   34,W
0500:  MOVWF  38
0501:  MOVF   33,W
0502:  MOVWF  37
0503:  MOVF   32,W
0504:  MOVWF  36
0505:  MOVF   31,W
0506:  MOVWF  35
0507:  MOVLW  02
0508:  MOVWF  39
0509:  CALL   2C7
050A:  RETURN
.................... } 
.................... void main() {  
050B:  MOVF   03,W
050C:  ANDLW  1F
050D:  MOVWF  03
050E:  MOVLW  01
050F:  MOVWF  23
0510:  MOVLW  08
0511:  MOVWF  24
0512:  CLRF   2C
0513:  CLRF   2B
0514:  BSF    03.5
0515:  BSF    03.6
0516:  MOVF   09,W
0517:  ANDLW  C0
0518:  MOVWF  09
0519:  BCF    03.6
051A:  BCF    1F.4
051B:  BCF    1F.5
051C:  MOVLW  00
051D:  BSF    03.6
051E:  MOVWF  08
051F:  BCF    03.5
0520:  CLRF   07
0521:  CLRF   08
0522:  CLRF   09
0523:  BCF    03.7
.................... kbd_init(); 
*
052A:  GOTO   016
.................... setup_adc_ports(0); 
052B:  BSF    03.5
052C:  BSF    03.6
052D:  MOVF   09,W
052E:  ANDLW  C0
052F:  MOVWF  09
0530:  BCF    03.6
0531:  BCF    1F.4
0532:  BCF    1F.5
0533:  MOVLW  00
0534:  BSF    03.6
0535:  MOVWF  08
.................... setup_adc(adc_clock_internal); 
0536:  BCF    03.5
0537:  BCF    03.6
0538:  BSF    1F.6
0539:  BSF    1F.7
053A:  BSF    03.5
053B:  BSF    1F.7
053C:  BCF    03.5
053D:  BSF    1F.0
.................... lcd_init(0x4E  ,16,2); 
053E:  MOVLW  4E
053F:  MOVWF  2D
0540:  MOVLW  10
0541:  MOVWF  2E
0542:  MOVLW  02
0543:  MOVWF  2F
0544:  GOTO   0E8
.................... lcd_backlight_led(ON); //Enciende la luz de Fondo 
0545:  MOVLW  01
0546:  MOVWF  2D
0547:  GOTO   147
.................... while (TRUE) {  
.................... FOR( X=1;X<=10;X++) 
0548:  MOVLW  01
0549:  MOVWF  2A
054A:  MOVF   2A,W
054B:  SUBLW  0A
054C:  BTFSS  03.0
054D:  GOTO   56E
.................... { 
.................... LCD_GOTOXY(X-1,2); 
054E:  MOVLW  01
054F:  SUBWF  2A,W
0550:  MOVWF  2D
0551:  MOVWF  43
0552:  MOVLW  02
0553:  MOVWF  44
0554:  CALL   151
.................... LCD_PUTC("_"); 
0555:  MOVLW  0C
0556:  BSF    03.6
0557:  MOVWF  0D
0558:  MOVLW  00
0559:  MOVWF  0F
055A:  BCF    03.6
055B:  CALL   1AD
.................... LCD_GOTOXY(X,2); 
055C:  MOVF   2A,W
055D:  MOVWF  43
055E:  MOVLW  02
055F:  MOVWF  44
0560:  CALL   151
.................... LCD_PUTC("JOSE_ID"); 
0561:  MOVLW  0D
0562:  BSF    03.6
0563:  MOVWF  0D
0564:  MOVLW  00
0565:  MOVWF  0F
0566:  BCF    03.6
0567:  CALL   1AD
.................... DELAY_MS(250); 
0568:  MOVLW  FA
0569:  MOVWF  43
056A:  CALL   019
.................... LEER_A0(); 
056B:  CALL   3A7
056C:  INCF   2A,F
056D:  GOTO   54A
.................... } 
....................  
.................... FOR( X=10;X>=1;X--) 
056E:  MOVLW  0A
056F:  MOVWF  2A
0570:  MOVF   2A,W
0571:  SUBLW  00
0572:  BTFSC  03.0
0573:  GOTO   594
.................... { 
.................... LCD_GOTOXY(X+7,2); 
0574:  MOVLW  07
0575:  ADDWF  2A,W
0576:  MOVWF  2D
0577:  MOVWF  43
0578:  MOVLW  02
0579:  MOVWF  44
057A:  CALL   151
.................... LCD_PUTC("_"); 
057B:  MOVLW  11
057C:  BSF    03.6
057D:  MOVWF  0D
057E:  MOVLW  00
057F:  MOVWF  0F
0580:  BCF    03.6
0581:  CALL   1AD
.................... LCD_GOTOXY(X,2); 
0582:  MOVF   2A,W
0583:  MOVWF  43
0584:  MOVLW  02
0585:  MOVWF  44
0586:  CALL   151
.................... LCD_PUTC("JOSE_ID"); 
0587:  MOVLW  12
0588:  BSF    03.6
0589:  MOVWF  0D
058A:  MOVLW  00
058B:  MOVWF  0F
058C:  BCF    03.6
058D:  CALL   1AD
.................... DELAY_MS(250); 
058E:  MOVLW  FA
058F:  MOVWF  43
0590:  CALL   019
.................... LEER_A0(); 
0591:  CALL   3A7
0592:  DECF   2A,F
0593:  GOTO   570
.................... } 
0594:  GOTO   548
....................  
.................... }     
.................... }  
0595:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
